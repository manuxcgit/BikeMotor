
CadenceSensorG041.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044d8  080044d8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080044e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000001c  080044fc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080044fc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f448  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002149  00000000  00000000  0002f48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e30  00000000  00000000  00032c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f53e  00000000  00000000  00034ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3a8  00000000  00000000  00043ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  000ce3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004424 	.word	0x08004424

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08004424 	.word	0x08004424

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8d8 	bl	8000608 <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8d3 	bl	8000608 <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <__clzdi2>:
 8000608:	b510      	push	{r4, lr}
 800060a:	2900      	cmp	r1, #0
 800060c:	d103      	bne.n	8000616 <__clzdi2+0xe>
 800060e:	f7ff ffdd 	bl	80005cc <__clzsi2>
 8000612:	3020      	adds	r0, #32
 8000614:	e002      	b.n	800061c <__clzdi2+0x14>
 8000616:	0008      	movs	r0, r1
 8000618:	f7ff ffd8 	bl	80005cc <__clzsi2>
 800061c:	bd10      	pop	{r4, pc}
 800061e:	46c0      	nop			; (mov r8, r8)

08000620 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *pHuart){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	_RxData_ISR = (_RxData[_RxData_Index] == '\n');
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_UART_RxCpltCallback+0x60>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	001a      	movs	r2, r3
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_UART_RxCpltCallback+0x64>)
 8000630:	5c9b      	ldrb	r3, [r3, r2]
 8000632:	3b0a      	subs	r3, #10
 8000634:	425a      	negs	r2, r3
 8000636:	4153      	adcs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	001a      	movs	r2, r3
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_UART_RxCpltCallback+0x68>)
 800063e:	701a      	strb	r2, [r3, #0]
	if (_RxData_ISR > 0){
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_UART_RxCpltCallback+0x68>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d007      	beq.n	8000658 <HAL_UART_RxCpltCallback+0x38>
		_RxData_Length = _RxData_Index;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_UART_RxCpltCallback+0x60>)
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_UART_RxCpltCallback+0x6c>)
 800064e:	701a      	strb	r2, [r3, #0]
		_RxData_Index = 0;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_UART_RxCpltCallback+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e005      	b.n	8000664 <HAL_UART_RxCpltCallback+0x44>
	}
	else {
		_RxData_Index ++;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_UART_RxCpltCallback+0x60>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <HAL_UART_RxCpltCallback+0x60>)
 8000662:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &_RxData[_RxData_Index], 1);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_UART_RxCpltCallback+0x60>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	001a      	movs	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_UART_RxCpltCallback+0x64>)
 800066c:	18d1      	adds	r1, r2, r3
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_UART_RxCpltCallback+0x70>)
 8000670:	2201      	movs	r2, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f001 ff68 	bl	8002548 <HAL_UART_Receive_IT>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000130 	.word	0x20000130
 8000684:	20000120 	.word	0x20000120
 8000688:	20000132 	.word	0x20000132
 800068c:	20000131 	.word	0x20000131
 8000690:	2000008c 	.word	0x2000008c

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fab8 	bl	8000c0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f848 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f91c 	bl	80008dc <MX_GPIO_Init>
  MX_I2C2_Init();
 80006a4:	f000 f88c 	bl	80007c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 f8ca 	bl	8000840 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, _RxData, 1);
 80006ac:	4919      	ldr	r1, [pc, #100]	; (8000714 <main+0x80>)
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <main+0x84>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 ff48 	bl	8002548 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
		  HAL_Delay(250);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
		  HAL_Delay(250);
		  */
		  HAL_Delay(1000);
 80006b8:	23fa      	movs	r3, #250	; 0xfa
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fb2b 	bl	8000d18 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, _TxData, sizeof(_TxData), 100);
 80006c2:	4916      	ldr	r1, [pc, #88]	; (800071c <main+0x88>)
 80006c4:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0x84>)
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	2210      	movs	r2, #16
 80006ca:	f001 fea1 	bl	8002410 <HAL_UART_Transmit>
		  if (_RxData_ISR > 0){
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0x8c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f0      	beq.n	80006b8 <main+0x24>
			  HAL_UART_Transmit(&huart1, (uint8_t*)">>",2,100);
 80006d6:	4913      	ldr	r1, [pc, #76]	; (8000724 <main+0x90>)
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <main+0x84>)
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	2202      	movs	r2, #2
 80006de:	f001 fe97 	bl	8002410 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, _RxData, _RxData_Length, 100);
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <main+0x94>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	490a      	ldr	r1, [pc, #40]	; (8000714 <main+0x80>)
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <main+0x84>)
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	f001 fe8f 	bl	8002410 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t*)"<<\r\n",4,100);
 80006f2:	490e      	ldr	r1, [pc, #56]	; (800072c <main+0x98>)
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <main+0x84>)
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2204      	movs	r2, #4
 80006fa:	f001 fe89 	bl	8002410 <HAL_UART_Transmit>
			  memset(_RxData, 0, 16);
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <main+0x80>)
 8000700:	2210      	movs	r2, #16
 8000702:	2100      	movs	r1, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f003 fe85 	bl	8004414 <memset>
			  _RxData_ISR = 0;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <main+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 8000710:	e7d2      	b.n	80006b8 <main+0x24>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000120 	.word	0x20000120
 8000718:	2000008c 	.word	0x2000008c
 800071c:	20000000 	.word	0x20000000
 8000720:	20000132 	.word	0x20000132
 8000724:	0800443c 	.word	0x0800443c
 8000728:	20000131 	.word	0x20000131
 800072c:	08004440 	.word	0x08004440

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b093      	sub	sp, #76	; 0x4c
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	2410      	movs	r4, #16
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2338      	movs	r3, #56	; 0x38
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fe67 	bl	8004414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	003b      	movs	r3, r7
 8000748:	0018      	movs	r0, r3
 800074a:	2310      	movs	r3, #16
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f003 fe60 	bl	8004414 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 ff5b 	bl	8001614 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2202      	movs	r2, #2
 8000762:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	f000 ff93 	bl	80016ac <HAL_RCC_OscConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800078a:	f000 f90b 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	003b      	movs	r3, r7
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a6:	003b      	movs	r3, r7
 80007a8:	2100      	movs	r1, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fa98 	bl	8001ce0 <HAL_RCC_ClockConfig>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007b4:	f000 f8f6 	bl	80009a4 <Error_Handler>
  }
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b013      	add	sp, #76	; 0x4c
 80007be:	bd90      	pop	{r4, r7, pc}

080007c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C2_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C2_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C2_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2C2_Init+0x74>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fddb 	bl	80013b8 <HAL_I2C_Init>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 f8cd 	bl	80009a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_I2C2_Init+0x74>)
 800080c:	2100      	movs	r1, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fe68 	bl	80014e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 f8c4 	bl	80009a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <MX_I2C2_Init+0x74>)
 800081e:	2100      	movs	r1, #0
 8000820:	0018      	movs	r0, r3
 8000822:	f000 feab 	bl	800157c <HAL_I2CEx_ConfigDigitalFilter>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 f8bb 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000038 	.word	0x20000038
 8000838:	40005800 	.word	0x40005800
 800083c:	0010061a 	.word	0x0010061a

08000840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000846:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <MX_USART1_UART_Init+0x98>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 800084c:	22e1      	movs	r2, #225	; 0xe1
 800084e:	0252      	lsls	r2, r2, #9
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fd6a 	bl	8002364 <HAL_UART_Init>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000894:	f000 f886 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 800089a:	2100      	movs	r1, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f003 fcb5 	bl	800420c <HAL_UARTEx_SetTxFifoThreshold>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008a6:	f000 f87d 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f003 fcec 	bl	800428c <HAL_UARTEx_SetRxFifoThreshold>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008b8:	f000 f874 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_USART1_UART_Init+0x94>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f003 fc6a 	bl	8004198 <HAL_UARTEx_DisableFifoMode>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008c8:	f000 f86c 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE_RXFNEIE | USART_CR1_RE | USART_CR1_UE);
  /* USER CODE END USART1_Init 2 */

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40013800 	.word	0x40013800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	240c      	movs	r4, #12
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f003 fd91 	bl	8004414 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0xc0>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <MX_GPIO_Init+0xc0>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0xc0>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000902:	2202      	movs	r2, #2
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_GPIO_Init+0xc0>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_GPIO_Init+0xc0>)
 8000910:	2120      	movs	r1, #32
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_GPIO_Init+0xc0>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	2220      	movs	r2, #32
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_GPIO_Init+0xc0>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_GPIO_Init+0xc0>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_GPIO_Init+0xc0>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	0199      	lsls	r1, r3, #6
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2200      	movs	r2, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fd19 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2204      	movs	r2, #4
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095c:	193b      	adds	r3, r7, r4
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000960:	0019      	movs	r1, r3
 8000962:	0010      	movs	r0, r2
 8000964:	f000 fba6 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000968:	0021      	movs	r1, r4
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0192      	lsls	r2, r2, #6
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	187a      	adds	r2, r7, r1
 8000986:	23a0      	movs	r3, #160	; 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fb91 	bl	80010b4 <HAL_GPIO_Init>

}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b009      	add	sp, #36	; 0x24
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40021000 	.word	0x40021000
 80009a0:	50001400 	.word	0x50001400

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0549      	lsls	r1, r1, #21
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_MspInit+0x44>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	055b      	lsls	r3, r3, #21
 80009e4:	4013      	ands	r3, r2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	2414      	movs	r4, #20
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	2314      	movs	r3, #20
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f003 fd02 	bl	8004414 <memset>
  if(hi2c->Instance==I2C2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <HAL_I2C_MspInit+0x90>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d131      	bne.n	8000a7e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_I2C_MspInit+0x94>)
 8000a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_I2C_MspInit+0x94>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_I2C_MspInit+0x94>)
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	22c0      	movs	r2, #192	; 0xc0
 8000a36:	0152      	lsls	r2, r2, #5
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2212      	movs	r2, #18
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2206      	movs	r2, #6
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb29 	bl	80010b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_I2C_MspInit+0x94>)
 8000a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_I2C_MspInit+0x94>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	03c9      	lsls	r1, r1, #15
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_I2C_MspInit+0x94>)
 8000a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	03db      	lsls	r3, r3, #15
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b00b      	add	sp, #44	; 0x2c
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40005800 	.word	0x40005800
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b095      	sub	sp, #84	; 0x54
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	233c      	movs	r3, #60	; 0x3c
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f003 fcb6 	bl	8004414 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	2410      	movs	r4, #16
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	232c      	movs	r3, #44	; 0x2c
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f003 fcae 	bl	8004414 <memset>
  if(huart->Instance==USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <HAL_UART_MspInit+0xc8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d145      	bne.n	8000b4e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 faaf 	bl	8002034 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ada:	f7ff ff63 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_UART_MspInit+0xcc>)
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_UART_MspInit+0xcc>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	01c9      	lsls	r1, r1, #7
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	641a      	str	r2, [r3, #64]	; 0x40
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0xcc>)
 8000aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	01db      	lsls	r3, r3, #7
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0xcc>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0xcc>)
 8000b00:	2102      	movs	r1, #2
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0xcc>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b12:	213c      	movs	r1, #60	; 0x3c
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	22c0      	movs	r2, #192	; 0xc0
 8000b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_UART_MspInit+0xd0>)
 8000b36:	0019      	movs	r1, r3
 8000b38:	0010      	movs	r0, r2
 8000b3a:	f000 fabb 	bl	80010b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	201b      	movs	r0, #27
 8000b44:	f000 f9b8 	bl	8000eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b48:	201b      	movs	r0, #27
 8000b4a:	f000 f9ca 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b015      	add	sp, #84	; 0x54
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	50000400 	.word	0x50000400

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f8aa 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	char ch;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <USART1_IRQHandler+0x14>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fd32 	bl	8002604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	2000008c 	.word	0x2000008c

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bbc:	f7ff fff6 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be6:	f003 fbf1 	bl	80043cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bea:	f7ff fd53 	bl	8000694 <main>

08000bee <LoopForever>:

LoopForever:
  b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   r0, =_estack
 8000bf0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bfc:	080044e0 	.word	0x080044e0
  ldr r2, =_sbss
 8000c00:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c04:	20000138 	.word	0x20000138

08000c08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x3c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Init+0x3c>)
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	0049      	lsls	r1, r1, #1
 8000c22:	430a      	orrs	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f810 	bl	8000c4c <HAL_InitTick>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e001      	b.n	8000c3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff feba 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_InitTick+0x88>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d02b      	beq.n	8000cbc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_InitTick+0x8c>)
 8000c66:	681c      	ldr	r4, [r3, #0]
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HAL_InitTick+0x88>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	23fa      	movs	r3, #250	; 0xfa
 8000c70:	0098      	lsls	r0, r3, #2
 8000c72:	f7ff fa49 	bl	8000108 <__udivsi3>
 8000c76:	0003      	movs	r3, r0
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	f7ff fa44 	bl	8000108 <__udivsi3>
 8000c80:	0003      	movs	r3, r0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f93d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d112      	bne.n	8000cb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d80a      	bhi.n	8000ca8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 f90c 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_InitTick+0x90>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	e00d      	b.n	8000cc4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e008      	b.n	8000cc4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e003      	b.n	8000cc4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b005      	add	sp, #20
 8000cd0:	bd90      	pop	{r4, r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000018 	.word	0x20000018
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	20000014 	.word	0x20000014

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	18d2      	adds	r2, r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	20000018 	.word	0x20000018
 8000d00:	20000134 	.word	0x20000134

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000134 	.word	0x20000134

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff fff0 	bl	8000d04 <HAL_GetTick>
 8000d24:	0003      	movs	r3, r0
 8000d26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	001a      	movs	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	189b      	adds	r3, r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	f7ff ffe0 	bl	8000d04 <HAL_GetTick>
 8000d44:	0002      	movs	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000018 	.word	0x20000018

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	0002      	movs	r2, r0
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b7f      	cmp	r3, #127	; 0x7f
 8000d72:	d809      	bhi.n	8000d88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	231f      	movs	r3, #31
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_EnableIRQ+0x30>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	4091      	lsls	r1, r2
 8000d84:	000a      	movs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b7f      	cmp	r3, #127	; 0x7f
 8000da8:	d828      	bhi.n	8000dfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <__NVIC_SetPriority+0xd4>)
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	33c0      	adds	r3, #192	; 0xc0
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	589b      	ldr	r3, [r3, r2]
 8000dba:	1dfa      	adds	r2, r7, #7
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	21ff      	movs	r1, #255	; 0xff
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	401a      	ands	r2, r3
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	2303      	movs	r3, #3
 8000de2:	4003      	ands	r3, r0
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	481f      	ldr	r0, [pc, #124]	; (8000e68 <__NVIC_SetPriority+0xd4>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	430a      	orrs	r2, r1
 8000df4:	33c0      	adds	r3, #192	; 0xc0
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dfa:	e031      	b.n	8000e60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	0019      	movs	r1, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	400b      	ands	r3, r1
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3306      	adds	r3, #6
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1dfa      	adds	r2, r7, #7
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	400a      	ands	r2, r1
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	21ff      	movs	r1, #255	; 0xff
 8000e24:	4091      	lsls	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	43d2      	mvns	r2, r2
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	22ff      	movs	r2, #255	; 0xff
 8000e34:	401a      	ands	r2, r3
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	4003      	ands	r3, r0
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	001c      	movs	r4, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	4023      	ands	r3, r4
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	430a      	orrs	r2, r1
 8000e56:	3306      	adds	r3, #6
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	18c3      	adds	r3, r0, r3
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b003      	add	sp, #12
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	045b      	lsls	r3, r3, #17
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d301      	bcc.n	8000e88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e84:	2301      	movs	r3, #1
 8000e86:	e010      	b.n	8000eaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <SysTick_Config+0x44>)
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e90:	2301      	movs	r3, #1
 8000e92:	425b      	negs	r3, r3
 8000e94:	2103      	movs	r1, #3
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff ff7c 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x44>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x44>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	1c02      	adds	r2, r0, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	0002      	movs	r2, r0
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff ff33 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ffaf 	bl	8000e70 <SysTick_Config>
 8000f12:	0003      	movs	r3, r0
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e050      	b.n	8000fd0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2225      	movs	r2, #37	; 0x25
 8000f32:	5c9b      	ldrb	r3, [r3, r2]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d008      	beq.n	8000f4c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2224      	movs	r2, #36	; 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e041      	b.n	8000fd0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	210e      	movs	r1, #14
 8000f58:	438a      	bics	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	491c      	ldr	r1, [pc, #112]	; (8000fd8 <HAL_DMA_Abort+0xbc>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2101      	movs	r1, #1
 8000f78:	438a      	bics	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_DMA_Abort+0xc0>)
 8000f7e:	6859      	ldr	r1, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	221c      	movs	r2, #28
 8000f86:	4013      	ands	r3, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_DMA_Abort+0xc0>)
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00c      	beq.n	8000fbe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fae:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <HAL_DMA_Abort+0xbc>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000fbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2225      	movs	r2, #37	; 0x25
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	fffffeff 	.word	0xfffffeff
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe8:	210f      	movs	r1, #15
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2225      	movs	r2, #37	; 0x25
 8000ff4:	5c9b      	ldrb	r3, [r3, r2]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d006      	beq.n	800100a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2204      	movs	r2, #4
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e049      	b.n	800109e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	210e      	movs	r1, #14
 8001016:	438a      	bics	r2, r1
 8001018:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	438a      	bics	r2, r1
 8001028:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	491d      	ldr	r1, [pc, #116]	; (80010ac <HAL_DMA_Abort_IT+0xcc>)
 8001036:	400a      	ands	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_DMA_Abort_IT+0xd0>)
 800103c:	6859      	ldr	r1, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	221c      	movs	r2, #28
 8001044:	4013      	ands	r3, r2
 8001046:	2201      	movs	r2, #1
 8001048:	409a      	lsls	r2, r3
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_DMA_Abort_IT+0xd0>)
 800104c:	430a      	orrs	r2, r1
 800104e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001058:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00c      	beq.n	800107c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106c:	490f      	ldr	r1, [pc, #60]	; (80010ac <HAL_DMA_Abort_IT+0xcc>)
 800106e:	400a      	ands	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800107a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2225      	movs	r2, #37	; 0x25
 8001080:	2101      	movs	r1, #1
 8001082:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2224      	movs	r2, #36	; 0x24
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	0010      	movs	r0, r2
 800109c:	4798      	blx	r3
    }
  }
  return status;
 800109e:	230f      	movs	r3, #15
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b004      	add	sp, #16
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	fffffeff 	.word	0xfffffeff
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e147      	b.n	8001354 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <HAL_GPIO_Init+0x28>
 80010da:	e138      	b.n	800134e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	409a      	lsls	r2, r3
 8001116:	0013      	movs	r3, r2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	2201      	movs	r2, #1
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	2b03      	cmp	r3, #3
 8001160:	d017      	beq.n	8001192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	4013      	ands	r3, r2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2207      	movs	r2, #7
 80011b0:	4013      	ands	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2107      	movs	r1, #7
 80011ca:	400b      	ands	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	6939      	ldr	r1, [r7, #16]
 80011e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	401a      	ands	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	23c0      	movs	r3, #192	; 0xc0
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d100      	bne.n	8001228 <HAL_GPIO_Init+0x174>
 8001226:	e092      	b.n	800134e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x2b8>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3318      	adds	r3, #24
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	589b      	ldr	r3, [r3, r2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	220f      	movs	r2, #15
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	429a      	cmp	r2, r3
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x1ca>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a45      	ldr	r2, [pc, #276]	; (8001370 <HAL_GPIO_Init+0x2bc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x1c6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a44      	ldr	r2, [pc, #272]	; (8001374 <HAL_GPIO_Init+0x2c0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x1c2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a43      	ldr	r2, [pc, #268]	; (8001378 <HAL_GPIO_Init+0x2c4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x1be>
 800126e:	2303      	movs	r3, #3
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x1cc>
 8001272:	2305      	movs	r3, #5
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x1cc>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x1cc>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x1cc>
 800127e:	2300      	movs	r3, #0
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	2103      	movs	r1, #3
 8001284:	400a      	ands	r2, r1
 8001286:	00d2      	lsls	r2, r2, #3
 8001288:	4093      	lsls	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001290:	4936      	ldr	r1, [pc, #216]	; (800136c <HAL_GPIO_Init+0x2b8>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3318      	adds	r3, #24
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_GPIO_Init+0x2b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	035b      	lsls	r3, r3, #13
 80012b6:	4013      	ands	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_GPIO_Init+0x2b8>)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_GPIO_Init+0x2b8>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	039b      	lsls	r3, r3, #14
 80012e0:	4013      	ands	r3, r2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_GPIO_Init+0x2b8>)
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012f2:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_GPIO_Init+0x2b8>)
 80012f4:	2384      	movs	r3, #132	; 0x84
 80012f6:	58d3      	ldr	r3, [r2, r3]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001318:	4914      	ldr	r1, [pc, #80]	; (800136c <HAL_GPIO_Init+0x2b8>)
 800131a:	2284      	movs	r2, #132	; 0x84
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <HAL_GPIO_Init+0x2b8>)
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	58d3      	ldr	r3, [r2, r3]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	4013      	ands	r3, r2
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001346:	4909      	ldr	r1, [pc, #36]	; (800136c <HAL_GPIO_Init+0x2b8>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	40da      	lsrs	r2, r3
 800135c:	1e13      	subs	r3, r2, #0
 800135e:	d000      	beq.n	8001362 <HAL_GPIO_Init+0x2ae>
 8001360:	e6b0      	b.n	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b006      	add	sp, #24
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021800 	.word	0x40021800
 8001370:	50000400 	.word	0x50000400
 8001374:	50000800 	.word	0x50000800
 8001378:	50000c00 	.word	0x50000c00

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	0008      	movs	r0, r1
 8001386:	0011      	movs	r1, r2
 8001388:	1cbb      	adds	r3, r7, #2
 800138a:	1c02      	adds	r2, r0, #0
 800138c:	801a      	strh	r2, [r3, #0]
 800138e:	1c7b      	adds	r3, r7, #1
 8001390:	1c0a      	adds	r2, r1, #0
 8001392:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	1c7b      	adds	r3, r7, #1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800139c:	1cbb      	adds	r3, r7, #2
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013a6:	1cbb      	adds	r3, r7, #2
 80013a8:	881a      	ldrh	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e082      	b.n	80014d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2241      	movs	r2, #65	; 0x41
 80013ce:	5c9b      	ldrb	r3, [r3, r2]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d107      	bne.n	80013e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	2100      	movs	r1, #0
 80013dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff fb09 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2241      	movs	r2, #65	; 0x41
 80013ea:	2124      	movs	r1, #36	; 0x24
 80013ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	438a      	bics	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4934      	ldr	r1, [pc, #208]	; (80014d8 <HAL_I2C_Init+0x120>)
 8001408:	400a      	ands	r2, r1
 800140a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4931      	ldr	r1, [pc, #196]	; (80014dc <HAL_I2C_Init+0x124>)
 8001418:	400a      	ands	r2, r1
 800141a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0209      	lsls	r1, r1, #8
 8001430:	430a      	orrs	r2, r1
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e007      	b.n	8001446 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2184      	movs	r1, #132	; 0x84
 8001440:	0209      	lsls	r1, r1, #8
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d104      	bne.n	8001458 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	491f      	ldr	r1, [pc, #124]	; (80014e0 <HAL_I2C_Init+0x128>)
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	491a      	ldr	r1, [pc, #104]	; (80014dc <HAL_I2C_Init+0x124>)
 8001474:	400a      	ands	r2, r1
 8001476:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	431a      	orrs	r2, r3
 8001482:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69d9      	ldr	r1, [r3, #28]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2241      	movs	r2, #65	; 0x41
 80014bc:	2120      	movs	r1, #32
 80014be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2242      	movs	r2, #66	; 0x42
 80014ca:	2100      	movs	r1, #0
 80014cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	f0ffffff 	.word	0xf0ffffff
 80014dc:	ffff7fff 	.word	0xffff7fff
 80014e0:	02008000 	.word	0x02008000

080014e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2241      	movs	r2, #65	; 0x41
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	d138      	bne.n	800156c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	5c9b      	ldrb	r3, [r3, r2]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001504:	2302      	movs	r3, #2
 8001506:	e032      	b.n	800156e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	2101      	movs	r1, #1
 800150e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2124      	movs	r1, #36	; 0x24
 8001516:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	438a      	bics	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4911      	ldr	r1, [pc, #68]	; (8001578 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2101      	movs	r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2241      	movs	r2, #65	; 0x41
 800155c:	2120      	movs	r1, #32
 800155e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2240      	movs	r2, #64	; 0x40
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800156c:	2302      	movs	r3, #2
  }
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	ffffefff 	.word	0xffffefff

0800157c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2241      	movs	r2, #65	; 0x41
 800158a:	5c9b      	ldrb	r3, [r3, r2]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b20      	cmp	r3, #32
 8001590:	d139      	bne.n	8001606 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2240      	movs	r2, #64	; 0x40
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800159c:	2302      	movs	r3, #2
 800159e:	e033      	b.n	8001608 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	2101      	movs	r1, #1
 80015a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2241      	movs	r2, #65	; 0x41
 80015ac:	2124      	movs	r1, #36	; 0x24
 80015ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	438a      	bics	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2241      	movs	r2, #65	; 0x41
 80015f6:	2120      	movs	r1, #32
 80015f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001606:	2302      	movs	r3, #2
  }
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}
 8001610:	fffff0ff 	.word	0xfffff0ff

08001614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001622:	4013      	ands	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d11f      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	0013      	movs	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	189b      	adds	r3, r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4912      	ldr	r1, [pc, #72]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001646:	0018      	movs	r0, r3
 8001648:	f7fe fd5e 	bl	8000108 <__udivsi3>
 800164c:	0003      	movs	r3, r0
 800164e:	3301      	adds	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001652:	e008      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e001      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e009      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	401a      	ands	r2, r3
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	429a      	cmp	r2, r3
 8001676:	d0ed      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40007000 	.word	0x40007000
 8001688:	fffff9ff 	.word	0xfffff9ff
 800168c:	20000010 	.word	0x20000010
 8001690:	000f4240 	.word	0x000f4240

08001694 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	23e0      	movs	r3, #224	; 0xe0
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	4013      	ands	r3, r2
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e2fe      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_RCC_OscConfig+0x1e>
 80016c8:	e07c      	b.n	80017c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4bc3      	ldr	r3, [pc, #780]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2238      	movs	r2, #56	; 0x38
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d4:	4bc0      	ldr	r3, [pc, #768]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x3e>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4bb9      	ldr	r3, [pc, #740]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	029b      	lsls	r3, r3, #10
 80016f8:	4013      	ands	r3, r2
 80016fa:	d062      	beq.n	80017c2 <HAL_RCC_OscConfig+0x116>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d15e      	bne.n	80017c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2d9      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
 8001714:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4baf      	ldr	r3, [pc, #700]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0249      	lsls	r1, r1, #9
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e020      	b.n	8001766 <HAL_RCC_OscConfig+0xba>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	02db      	lsls	r3, r3, #11
 800172c:	429a      	cmp	r2, r3
 800172e:	d10e      	bne.n	800174e <HAL_RCC_OscConfig+0xa2>
 8001730:	4ba9      	ldr	r3, [pc, #676]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4ba8      	ldr	r3, [pc, #672]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	02c9      	lsls	r1, r1, #11
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	4ba6      	ldr	r3, [pc, #664]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4ba5      	ldr	r3, [pc, #660]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0249      	lsls	r1, r1, #9
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0xba>
 800174e:	4ba2      	ldr	r3, [pc, #648]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	49a1      	ldr	r1, [pc, #644]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	4b9f      	ldr	r3, [pc, #636]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b9e      	ldr	r3, [pc, #632]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001760:	499f      	ldr	r1, [pc, #636]	; (80019e0 <HAL_RCC_OscConfig+0x334>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d014      	beq.n	8001798 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fac9 	bl	8000d04 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fac4 	bl	8000d04 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e298      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	4b93      	ldr	r3, [pc, #588]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xcc>
 8001796:	e015      	b.n	80017c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fab4 	bl	8000d04 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a2:	f7ff faaf 	bl	8000d04 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e283      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b4:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0xf6>
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x124>
 80017ce:	e099      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d0:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2238      	movs	r2, #56	; 0x38
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2203      	movs	r2, #3
 80017e0:	4013      	ands	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_OscConfig+0x144>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d002      	beq.n	80017f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d135      	bne.n	8001862 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x162>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e256      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a74      	ldr	r2, [pc, #464]	; (80019e4 <HAL_RCC_OscConfig+0x338>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	021a      	lsls	r2, r3, #8
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d112      	bne.n	8001850 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800182a:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6e      	ldr	r2, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0adb      	lsrs	r3, r3, #11
 8001844:	2207      	movs	r2, #7
 8001846:	4013      	ands	r3, r2
 8001848:	4a68      	ldr	r2, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x340>)
 800184a:	40da      	lsrs	r2, r3
 800184c:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x344>)
 800184e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x348>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff f9f9 	bl	8000c4c <HAL_InitTick>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d051      	beq.n	8001902 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e22c      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d030      	beq.n	80018cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800186a:	4b5b      	ldr	r3, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x33c>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0049      	lsls	r1, r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa3a 	bl	8000d04 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fa35 	bl	8000d04 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e209      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_RCC_OscConfig+0x338>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	021a      	lsls	r2, r3, #8
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	e01b      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	4949      	ldr	r1, [pc, #292]	; (80019f8 <HAL_RCC_OscConfig+0x34c>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa14 	bl	8000d04 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa0f 	bl	8000d04 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1e3      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x236>
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001902:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	4013      	ands	r3, r2
 800190c:	d047      	beq.n	800199e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2238      	movs	r2, #56	; 0x38
 8001914:	4013      	ands	r3, r2
 8001916:	2b18      	cmp	r3, #24
 8001918:	d10a      	bne.n	8001930 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x2f2>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d138      	bne.n	800199e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e1c5      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d019      	beq.n	800196c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800193a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f9de 	bl	8000d04 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f9d9 	bl	8000d04 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1ad      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d0f1      	beq.n	800194e <HAL_RCC_OscConfig+0x2a2>
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 800196e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f9c4 	bl	8000d04 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff f9bf 	bl	8000d04 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e193      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d1f1      	bne.n	8001982 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2204      	movs	r2, #4
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x2fe>
 80019a8:	e0c6      	b.n	8001b38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	231f      	movs	r3, #31
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2238      	movs	r2, #56	; 0x38
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d11e      	bne.n	80019fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x31e>
 80019c8:	e0b6      	b.n	8001b38 <HAL_RCC_OscConfig+0x48c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d000      	beq.n	80019d4 <HAL_RCC_OscConfig+0x328>
 80019d2:	e0b1      	b.n	8001b38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e171      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	fffeffff 	.word	0xfffeffff
 80019e0:	fffbffff 	.word	0xfffbffff
 80019e4:	ffff80ff 	.word	0xffff80ff
 80019e8:	ffffc7ff 	.word	0xffffc7ff
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	20000010 	.word	0x20000010
 80019f4:	20000014 	.word	0x20000014
 80019f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019fc:	4bb1      	ldr	r3, [pc, #708]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 80019fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x360>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x362>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d011      	beq.n	8001a36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4bac      	ldr	r3, [pc, #688]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a16:	4bab      	ldr	r3, [pc, #684]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0549      	lsls	r1, r1, #21
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	4ba8      	ldr	r3, [pc, #672]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	055b      	lsls	r3, r3, #21
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	4ba4      	ldr	r3, [pc, #656]	; (8001cc8 <HAL_RCC_OscConfig+0x61c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a42:	4ba1      	ldr	r3, [pc, #644]	; (8001cc8 <HAL_RCC_OscConfig+0x61c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4ba0      	ldr	r3, [pc, #640]	; (8001cc8 <HAL_RCC_OscConfig+0x61c>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0049      	lsls	r1, r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f958 	bl	8000d04 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff f953 	bl	8000d04 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e127      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_RCC_OscConfig+0x61c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3e2>
 8001a80:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a84:	4b8f      	ldr	r3, [pc, #572]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x404>
 8001a96:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9a:	4b8a      	ldr	r3, [pc, #552]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa6:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab4:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c
 8001abc:	4b81      	ldr	r3, [pc, #516]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001abe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac0:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d014      	beq.n	8001afa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f918 	bl	8000d04 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f913 	bl	8000d04 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a79      	ldr	r2, [pc, #484]	; (8001ccc <HAL_RCC_OscConfig+0x620>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0e6      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aee:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x42e>
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f903 	bl	8000d04 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f8fe 	bl	8000d04 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	4a6f      	ldr	r2, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x620>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0d1      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b22:	231f      	movs	r3, #31
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b30:	4b64      	ldr	r3, [pc, #400]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b32:	4967      	ldr	r1, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x624>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x496>
 8001b40:	e0bb      	b.n	8001cba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d100      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4a4>
 8001b4e:	e07b      	b.n	8001c48 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d156      	bne.n	8001c06 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	495d      	ldr	r1, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x628>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f8ce 	bl	8000d04 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff f8c9 	bl	8000d04 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e09d      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	049b      	lsls	r3, r3, #18
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_RCC_OscConfig+0x62c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0449      	lsls	r1, r1, #17
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0549      	lsls	r1, r1, #21
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f892 	bl	8000d04 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f88d 	bl	8000d04 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e061      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	049b      	lsls	r3, r3, #18
 8001c00:	4013      	ands	r3, r2
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x53a>
 8001c04:	e059      	b.n	8001cba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c0c:	4931      	ldr	r1, [pc, #196]	; (8001cd4 <HAL_RCC_OscConfig+0x628>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f877 	bl	8000d04 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f872 	bl	8000d04 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e046      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	049b      	lsls	r3, r3, #18
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c40:	4926      	ldr	r1, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x630>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e038      	b.n	8001cba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e033      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d126      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2270      	movs	r2, #112	; 0x70
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d11f      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	23fe      	movs	r3, #254	; 0xfe
 8001c7a:	01db      	lsls	r3, r3, #7
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d116      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	23f8      	movs	r3, #248	; 0xf8
 8001c8c:	039b      	lsls	r3, r3, #14
 8001c8e:	401a      	ands	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d10e      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	23e0      	movs	r3, #224	; 0xe0
 8001c9c:	051b      	lsls	r3, r3, #20
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	0f5b      	lsrs	r3, r3, #29
 8001cac:	075a      	lsls	r2, r3, #29
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b008      	add	sp, #32
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	00001388 	.word	0x00001388
 8001cd0:	efffffff 	.word	0xefffffff
 8001cd4:	feffffff 	.word	0xfeffffff
 8001cd8:	11c1808c 	.word	0x11c1808c
 8001cdc:	eefefffc 	.word	0xeefefffc

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0e9      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d91e      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b73      	ldr	r3, [pc, #460]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2207      	movs	r2, #7
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d14:	f7fe fff6 	bl	8000d04 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1e:	f7fe fff1 	bl	8000d04 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a6a      	ldr	r2, [pc, #424]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0ca      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	4013      	ands	r3, r2
 8001d52:	d006      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d54:	4b60      	ldr	r3, [pc, #384]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	21e0      	movs	r1, #224	; 0xe0
 8001d5c:	01c9      	lsls	r1, r1, #7
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4a5d      	ldr	r2, [pc, #372]	; (8001edc <HAL_RCC_ClockConfig+0x1fc>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d057      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d12b      	bne.n	8001dec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e097      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da0:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	049b      	lsls	r3, r3, #18
 8001da8:	4013      	ands	r3, r2
 8001daa:	d11f      	bne.n	8001dec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e08b      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d113      	bne.n	8001dec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e07f      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e074      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e06d      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2207      	movs	r2, #7
 8001df2:	4393      	bics	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7fe ff80 	bl	8000d04 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0a:	f7fe ff7b 	bl	8000d04 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e054      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2238      	movs	r2, #56	; 0x38
 8001e24:	401a      	ands	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1ec      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2207      	movs	r2, #7
 8001e36:	4013      	ands	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d21e      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e50:	f7fe ff58 	bl	8000d04 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7fe ff53 	bl	8000d04 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e02c      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2207      	movs	r2, #7
 8001e74:	4013      	ands	r3, r2
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2204      	movs	r2, #4
 8001e82:	4013      	ands	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <HAL_RCC_ClockConfig+0x200>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e9a:	f000 f829 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001e9e:	0001      	movs	r1, r0
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x204>)
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	58d3      	ldr	r3, [r2, r3]
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	40da      	lsrs	r2, r3
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_ClockConfig+0x208>)
 8001eba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_ClockConfig+0x20c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe fec3 	bl	8000c4c <HAL_InitTick>
 8001ec6:	0003      	movs	r3, r0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	00001388 	.word	0x00001388
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	fffff0ff 	.word	0xfffff0ff
 8001ee0:	ffff8fff 	.word	0xffff8fff
 8001ee4:	08004448 	.word	0x08004448
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	20000014 	.word	0x20000014

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2238      	movs	r2, #56	; 0x38
 8001efc:	4013      	ands	r3, r2
 8001efe:	d10f      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0adb      	lsrs	r3, r3, #11
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	0013      	movs	r3, r2
 8001f10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	4835      	ldr	r0, [pc, #212]	; (8001fec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f16:	f7fe f8f7 	bl	8000108 <__udivsi3>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	e05d      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2238      	movs	r2, #56	; 0x38
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e054      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2238      	movs	r2, #56	; 0x38
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d138      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2203      	movs	r2, #3
 8001f44:	4013      	ands	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	3301      	adds	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f60:	f7fe f8d2 	bl	8000108 <__udivsi3>
 8001f64:	0003      	movs	r3, r0
 8001f66:	0019      	movs	r1, r3
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	227f      	movs	r2, #127	; 0x7f
 8001f70:	4013      	ands	r3, r2
 8001f72:	434b      	muls	r3, r1
 8001f74:	617b      	str	r3, [r7, #20]
        break;
 8001f76:	e00d      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	481c      	ldr	r0, [pc, #112]	; (8001fec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f7c:	f7fe f8c4 	bl	8000108 <__udivsi3>
 8001f80:	0003      	movs	r3, r0
 8001f82:	0019      	movs	r1, r3
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	227f      	movs	r2, #127	; 0x7f
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	434b      	muls	r3, r1
 8001f90:	617b      	str	r3, [r7, #20]
        break;
 8001f92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0f5b      	lsrs	r3, r3, #29
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	6978      	ldr	r0, [r7, #20]
 8001fa6:	f7fe f8af 	bl	8000108 <__udivsi3>
 8001faa:	0003      	movs	r3, r0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e015      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2238      	movs	r2, #56	; 0x38
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d103      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2238      	movs	r2, #56	; 0x38
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b18      	cmp	r3, #24
 8001fce:	d103      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fd0:	23fa      	movs	r3, #250	; 0xfa
 8001fd2:	01db      	lsls	r3, r3, #7
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e001      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fdc:	693b      	ldr	r3, [r7, #16]
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	20000010 	.word	0x20000010

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800200c:	f7ff fff2 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002010:	0004      	movs	r4, r0
 8002012:	f7ff fb3f 	bl	8001694 <LL_RCC_GetAPB1Prescaler>
 8002016:	0003      	movs	r3, r0
 8002018:	0b1a      	lsrs	r2, r3, #12
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	58d3      	ldr	r3, [r2, r3]
 8002020:	221f      	movs	r2, #31
 8002022:	4013      	ands	r3, r2
 8002024:	40dc      	lsrs	r4, r3
 8002026:	0023      	movs	r3, r4
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	08004488 	.word	0x08004488

08002034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800203c:	2313      	movs	r3, #19
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002044:	2312      	movs	r3, #18
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	4013      	ands	r3, r2
 8002056:	d100      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002058:	e0a3      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2011      	movs	r0, #17
 800205c:	183b      	adds	r3, r7, r0
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4bb3      	ldr	r3, [pc, #716]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	055b      	lsls	r3, r3, #21
 800206a:	4013      	ands	r3, r2
 800206c:	d110      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4bb0      	ldr	r3, [pc, #704]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002072:	4baf      	ldr	r3, [pc, #700]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0549      	lsls	r1, r1, #21
 8002078:	430a      	orrs	r2, r1
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
 800207c:	4bac      	ldr	r3, [pc, #688]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800207e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	055b      	lsls	r3, r3, #21
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	183b      	adds	r3, r7, r0
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4ba8      	ldr	r3, [pc, #672]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4ba7      	ldr	r3, [pc, #668]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0049      	lsls	r1, r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209e:	f7fe fe31 	bl	8000d04 <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020a6:	e00b      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a8:	f7fe fe2c 	bl	8000d04 <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d904      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020b6:	2313      	movs	r3, #19
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2203      	movs	r2, #3
 80020bc:	701a      	strb	r2, [r3, #0]
        break;
 80020be:	e005      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c0:	4b9c      	ldr	r3, [pc, #624]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0ed      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020cc:	2313      	movs	r3, #19
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d154      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020d6:	4b96      	ldr	r3, [pc, #600]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80020d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d019      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d014      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f2:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020fc:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80020fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002100:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	0249      	lsls	r1, r1, #9
 8002106:	430a      	orrs	r2, r1
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800210a:	4b89      	ldr	r3, [pc, #548]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800210c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800210e:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002110:	498a      	ldr	r1, [pc, #552]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002112:	400a      	ands	r2, r1
 8002114:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002116:	4b86      	ldr	r3, [pc, #536]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2201      	movs	r2, #1
 8002120:	4013      	ands	r3, r2
 8002122:	d016      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fdee 	bl	8000d04 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00c      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fde9 	bl	8000d04 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4a81      	ldr	r2, [pc, #516]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d904      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800213e:	2313      	movs	r3, #19
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2203      	movs	r2, #3
 8002144:	701a      	strb	r2, [r3, #0]
            break;
 8002146:	e004      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002148:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d0ed      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002152:	2313      	movs	r3, #19
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215c:	4b74      	ldr	r3, [pc, #464]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	4a75      	ldr	r2, [pc, #468]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800216c:	430a      	orrs	r2, r1
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002170:	e00c      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002172:	2312      	movs	r3, #18
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2213      	movs	r2, #19
 8002178:	18ba      	adds	r2, r7, r2
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e005      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002180:	2312      	movs	r3, #18
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2213      	movs	r2, #19
 8002186:	18ba      	adds	r2, r7, r2
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800218c:	2311      	movs	r3, #17
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b66      	ldr	r3, [pc, #408]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800219a:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800219c:	4969      	ldr	r1, [pc, #420]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800219e:	400a      	ands	r2, r1
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ac:	4b60      	ldr	r3, [pc, #384]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	2203      	movs	r2, #3
 80021b2:	4393      	bics	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4b5d      	ldr	r3, [pc, #372]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	4013      	ands	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	4a5e      	ldr	r2, [pc, #376]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4013      	ands	r3, r2
 8002208:	d009      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	4a50      	ldr	r2, [pc, #320]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	4b45      	ldr	r3, [pc, #276]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800221a:	430a      	orrs	r2, r1
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2220      	movs	r2, #32
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002228:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002238:	430a      	orrs	r2, r1
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	02db      	lsls	r3, r3, #11
 8002244:	4013      	ands	r3, r2
 8002246:	d016      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	4a42      	ldr	r2, [pc, #264]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800224e:	4013      	ands	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002258:	430a      	orrs	r2, r1
 800225a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	23c0      	movs	r3, #192	; 0xc0
 8002262:	051b      	lsls	r3, r3, #20
 8002264:	429a      	cmp	r2, r3
 8002266:	d106      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	0449      	lsls	r1, r1, #17
 8002272:	430a      	orrs	r2, r1
 8002274:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	01db      	lsls	r3, r3, #7
 800227e:	4013      	ands	r3, r2
 8002280:	d015      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	0899      	lsrs	r1, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002290:	430a      	orrs	r2, r1
 8002292:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	05db      	lsls	r3, r3, #23
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	0249      	lsls	r1, r1, #9
 80022aa:	430a      	orrs	r2, r1
 80022ac:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	4013      	ands	r3, r2
 80022b8:	d016      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	03db      	lsls	r3, r3, #15
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0449      	lsls	r1, r1, #17
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4013      	ands	r3, r2
 80022f2:	d016      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002304:	430a      	orrs	r2, r1
 8002306:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	01db      	lsls	r3, r3, #7
 8002310:	429a      	cmp	r2, r3
 8002312:	d106      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	0249      	lsls	r1, r1, #9
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002322:	2312      	movs	r3, #18
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b006      	add	sp, #24
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	fffffcff 	.word	0xfffffcff
 800233c:	fffeffff 	.word	0xfffeffff
 8002340:	00001388 	.word	0x00001388
 8002344:	efffffff 	.word	0xefffffff
 8002348:	fffff3ff 	.word	0xfffff3ff
 800234c:	fff3ffff 	.word	0xfff3ffff
 8002350:	ffcfffff 	.word	0xffcfffff
 8002354:	ffffcfff 	.word	0xffffcfff
 8002358:	f3ffffff 	.word	0xf3ffffff
 800235c:	ffbfffff 	.word	0xffbfffff
 8002360:	ffff3fff 	.word	0xffff3fff

08002364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e046      	b.n	8002404 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2288      	movs	r2, #136	; 0x88
 800237a:	589b      	ldr	r3, [r3, r2]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2284      	movs	r2, #132	; 0x84
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f7fe fb80 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2288      	movs	r2, #136	; 0x88
 8002394:	2124      	movs	r1, #36	; 0x24
 8002396:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fc6c 	bl	8002c88 <UART_SetConfig>
 80023b0:	0003      	movs	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e024      	b.n	8002404 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 fed7 	bl	8003178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	490d      	ldr	r1, [pc, #52]	; (800240c <HAL_UART_Init+0xa8>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	212a      	movs	r1, #42	; 0x2a
 80023e6:	438a      	bics	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 ff6f 	bl	80032e0 <UART_CheckIdleState>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	ffffb7ff 	.word	0xffffb7ff

08002410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	1dbb      	adds	r3, r7, #6
 800241e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2288      	movs	r2, #136	; 0x88
 8002424:	589b      	ldr	r3, [r3, r2]
 8002426:	2b20      	cmp	r3, #32
 8002428:	d000      	beq.n	800242c <HAL_UART_Transmit+0x1c>
 800242a:	e088      	b.n	800253e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_UART_Transmit+0x2a>
 8002432:	1dbb      	adds	r3, r7, #6
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e080      	b.n	8002540 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	015b      	lsls	r3, r3, #5
 8002446:	429a      	cmp	r2, r3
 8002448:	d109      	bne.n	800245e <HAL_UART_Transmit+0x4e>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d001      	beq.n	800245e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e070      	b.n	8002540 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2290      	movs	r2, #144	; 0x90
 8002462:	2100      	movs	r1, #0
 8002464:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2288      	movs	r2, #136	; 0x88
 800246a:	2121      	movs	r1, #33	; 0x21
 800246c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800246e:	f7fe fc49 	bl	8000d04 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1dba      	adds	r2, r7, #6
 800247a:	2154      	movs	r1, #84	; 0x54
 800247c:	8812      	ldrh	r2, [r2, #0]
 800247e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1dba      	adds	r2, r7, #6
 8002484:	2156      	movs	r1, #86	; 0x56
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	015b      	lsls	r3, r3, #5
 8002492:	429a      	cmp	r2, r3
 8002494:	d108      	bne.n	80024a8 <HAL_UART_Transmit+0x98>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	e003      	b.n	80024b0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024b0:	e02c      	b.n	800250c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	0013      	movs	r3, r2
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	f000 ff5c 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e039      	b.n	8002540 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	001a      	movs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	05d2      	lsls	r2, r2, #23
 80024de:	0dd2      	lsrs	r2, r2, #23
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3302      	adds	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e007      	b.n	80024fa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	3301      	adds	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2256      	movs	r2, #86	; 0x56
 80024fe:	5a9b      	ldrh	r3, [r3, r2]
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b299      	uxth	r1, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2256      	movs	r2, #86	; 0x56
 800250a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2256      	movs	r2, #86	; 0x56
 8002510:	5a9b      	ldrh	r3, [r3, r2]
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1cc      	bne.n	80024b2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	0013      	movs	r3, r2
 8002522:	2200      	movs	r2, #0
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	f000 ff29 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d001      	beq.n	8002532 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e006      	b.n	8002540 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2288      	movs	r2, #136	; 0x88
 8002536:	2120      	movs	r1, #32
 8002538:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b008      	add	sp, #32
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	1dbb      	adds	r3, r7, #6
 8002554:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	228c      	movs	r2, #140	; 0x8c
 800255a:	589b      	ldr	r3, [r3, r2]
 800255c:	2b20      	cmp	r3, #32
 800255e:	d14a      	bne.n	80025f6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_UART_Receive_IT+0x26>
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e042      	b.n	80025f8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	015b      	lsls	r3, r3, #5
 800257a:	429a      	cmp	r2, r3
 800257c:	d109      	bne.n	8002592 <HAL_UART_Receive_IT+0x4a>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	d001      	beq.n	8002592 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e032      	b.n	80025f8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_UART_Receive_IT+0xb8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d020      	beq.n	80025e4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	4013      	ands	r3, r2
 80025ae:	d019      	beq.n	80025e4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	613b      	str	r3, [r7, #16]
  return(result);
 80025b6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	04c9      	lsls	r1, r1, #19
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f383 8810 	msr	PRIMASK, r3
}
 80025e2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	881a      	ldrh	r2, [r3, #0]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 ff8d 	bl	800350c <UART_Start_Receive_IT>
 80025f2:	0003      	movs	r3, r0
 80025f4:	e000      	b.n	80025f8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b008      	add	sp, #32
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40008000 	.word	0x40008000

08002604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b0aa      	sub	sp, #168	; 0xa8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	22a4      	movs	r2, #164	; 0xa4
 8002614:	18b9      	adds	r1, r7, r2
 8002616:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	20a0      	movs	r0, #160	; 0xa0
 8002620:	1839      	adds	r1, r7, r0
 8002622:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	249c      	movs	r4, #156	; 0x9c
 800262c:	1939      	adds	r1, r7, r4
 800262e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002630:	0011      	movs	r1, r2
 8002632:	18bb      	adds	r3, r7, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4aa2      	ldr	r2, [pc, #648]	; (80028c0 <HAL_UART_IRQHandler+0x2bc>)
 8002638:	4013      	ands	r3, r2
 800263a:	2298      	movs	r2, #152	; 0x98
 800263c:	18bd      	adds	r5, r7, r2
 800263e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002640:	18bb      	adds	r3, r7, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11a      	bne.n	800267e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002648:	187b      	adds	r3, r7, r1
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	4013      	ands	r3, r2
 8002650:	d015      	beq.n	800267e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002652:	183b      	adds	r3, r7, r0
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2220      	movs	r2, #32
 8002658:	4013      	ands	r3, r2
 800265a:	d105      	bne.n	8002668 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800265c:	193b      	adds	r3, r7, r4
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	055b      	lsls	r3, r3, #21
 8002664:	4013      	ands	r3, r2
 8002666:	d00a      	beq.n	800267e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266c:	2b00      	cmp	r3, #0
 800266e:	d100      	bne.n	8002672 <HAL_UART_IRQHandler+0x6e>
 8002670:	e2dc      	b.n	8002c2c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	0010      	movs	r0, r2
 800267a:	4798      	blx	r3
      }
      return;
 800267c:	e2d6      	b.n	8002c2c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800267e:	2398      	movs	r3, #152	; 0x98
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d100      	bne.n	800268a <HAL_UART_IRQHandler+0x86>
 8002688:	e122      	b.n	80028d0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800268a:	239c      	movs	r3, #156	; 0x9c
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a8c      	ldr	r2, [pc, #560]	; (80028c4 <HAL_UART_IRQHandler+0x2c0>)
 8002692:	4013      	ands	r3, r2
 8002694:	d106      	bne.n	80026a4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002696:	23a0      	movs	r3, #160	; 0xa0
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8a      	ldr	r2, [pc, #552]	; (80028c8 <HAL_UART_IRQHandler+0x2c4>)
 800269e:	4013      	ands	r3, r2
 80026a0:	d100      	bne.n	80026a4 <HAL_UART_IRQHandler+0xa0>
 80026a2:	e115      	b.n	80028d0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026a4:	23a4      	movs	r3, #164	; 0xa4
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	d012      	beq.n	80026d6 <HAL_UART_IRQHandler+0xd2>
 80026b0:	23a0      	movs	r3, #160	; 0xa0
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2290      	movs	r2, #144	; 0x90
 80026ca:	589b      	ldr	r3, [r3, r2]
 80026cc:	2201      	movs	r2, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2190      	movs	r1, #144	; 0x90
 80026d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026d6:	23a4      	movs	r3, #164	; 0xa4
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d011      	beq.n	8002706 <HAL_UART_IRQHandler+0x102>
 80026e2:	239c      	movs	r3, #156	; 0x9c
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d00b      	beq.n	8002706 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2202      	movs	r2, #2
 80026f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2290      	movs	r2, #144	; 0x90
 80026fa:	589b      	ldr	r3, [r3, r2]
 80026fc:	2204      	movs	r2, #4
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2190      	movs	r1, #144	; 0x90
 8002704:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002706:	23a4      	movs	r3, #164	; 0xa4
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2204      	movs	r2, #4
 800270e:	4013      	ands	r3, r2
 8002710:	d011      	beq.n	8002736 <HAL_UART_IRQHandler+0x132>
 8002712:	239c      	movs	r3, #156	; 0x9c
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d00b      	beq.n	8002736 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2290      	movs	r2, #144	; 0x90
 800272a:	589b      	ldr	r3, [r3, r2]
 800272c:	2202      	movs	r2, #2
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2190      	movs	r1, #144	; 0x90
 8002734:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002736:	23a4      	movs	r3, #164	; 0xa4
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2208      	movs	r2, #8
 800273e:	4013      	ands	r3, r2
 8002740:	d017      	beq.n	8002772 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002742:	23a0      	movs	r3, #160	; 0xa0
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2220      	movs	r2, #32
 800274a:	4013      	ands	r3, r2
 800274c:	d105      	bne.n	800275a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800274e:	239c      	movs	r3, #156	; 0x9c
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5b      	ldr	r2, [pc, #364]	; (80028c4 <HAL_UART_IRQHandler+0x2c0>)
 8002756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002758:	d00b      	beq.n	8002772 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2208      	movs	r2, #8
 8002760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2290      	movs	r2, #144	; 0x90
 8002766:	589b      	ldr	r3, [r3, r2]
 8002768:	2208      	movs	r2, #8
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2190      	movs	r1, #144	; 0x90
 8002770:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002772:	23a4      	movs	r3, #164	; 0xa4
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4013      	ands	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_UART_IRQHandler+0x1a4>
 8002780:	23a0      	movs	r3, #160	; 0xa0
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	04db      	lsls	r3, r3, #19
 800278a:	4013      	ands	r3, r2
 800278c:	d00c      	beq.n	80027a8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2290      	movs	r2, #144	; 0x90
 800279c:	589b      	ldr	r3, [r3, r2]
 800279e:	2220      	movs	r2, #32
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2190      	movs	r1, #144	; 0x90
 80027a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2290      	movs	r2, #144	; 0x90
 80027ac:	589b      	ldr	r3, [r3, r2]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d100      	bne.n	80027b4 <HAL_UART_IRQHandler+0x1b0>
 80027b2:	e23d      	b.n	8002c30 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027b4:	23a4      	movs	r3, #164	; 0xa4
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	4013      	ands	r3, r2
 80027be:	d015      	beq.n	80027ec <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027c0:	23a0      	movs	r3, #160	; 0xa0
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2220      	movs	r2, #32
 80027c8:	4013      	ands	r3, r2
 80027ca:	d106      	bne.n	80027da <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027cc:	239c      	movs	r3, #156	; 0x9c
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	055b      	lsls	r3, r3, #21
 80027d6:	4013      	ands	r3, r2
 80027d8:	d008      	beq.n	80027ec <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	0010      	movs	r0, r2
 80027ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2290      	movs	r2, #144	; 0x90
 80027f0:	589b      	ldr	r3, [r3, r2]
 80027f2:	2194      	movs	r1, #148	; 0x94
 80027f4:	187a      	adds	r2, r7, r1
 80027f6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	4013      	ands	r3, r2
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d004      	beq.n	8002810 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002806:	187b      	adds	r3, r7, r1
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2228      	movs	r2, #40	; 0x28
 800280c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800280e:	d04c      	beq.n	80028aa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0018      	movs	r0, r3
 8002814:	f000 ff9e 	bl	8003754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	4013      	ands	r3, r2
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d13c      	bne.n	80028a0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002826:	f3ef 8310 	mrs	r3, PRIMASK
 800282a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800282c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	2090      	movs	r0, #144	; 0x90
 8002830:	183a      	adds	r2, r7, r0
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	2301      	movs	r3, #1
 8002836:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283a:	f383 8810 	msr	PRIMASK, r3
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	438a      	bics	r2, r1
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	183b      	adds	r3, r7, r0
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002858:	f383 8810 	msr	PRIMASK, r3
}
 800285c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	589b      	ldr	r3, [r3, r2]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d016      	beq.n	8002896 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	589b      	ldr	r3, [r3, r2]
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_UART_IRQHandler+0x2c8>)
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	589b      	ldr	r3, [r3, r2]
 8002878:	0018      	movs	r0, r3
 800287a:	f7fe fbb1 	bl	8000fe0 <HAL_DMA_Abort_IT>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d01c      	beq.n	80028bc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	589b      	ldr	r3, [r3, r2]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	5852      	ldr	r2, [r2, r1]
 8002890:	0010      	movs	r0, r2
 8002892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	e012      	b.n	80028bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f9e1 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289e:	e00d      	b.n	80028bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f9dc 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a8:	e008      	b.n	80028bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 f9d7 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2290      	movs	r2, #144	; 0x90
 80028b6:	2100      	movs	r1, #0
 80028b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028ba:	e1b9      	b.n	8002c30 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	46c0      	nop			; (mov r8, r8)
    return;
 80028be:	e1b7      	b.n	8002c30 <HAL_UART_IRQHandler+0x62c>
 80028c0:	0000080f 	.word	0x0000080f
 80028c4:	10000001 	.word	0x10000001
 80028c8:	04000120 	.word	0x04000120
 80028cc:	08003821 	.word	0x08003821

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d000      	beq.n	80028da <HAL_UART_IRQHandler+0x2d6>
 80028d8:	e13e      	b.n	8002b58 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028da:	23a4      	movs	r3, #164	; 0xa4
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2210      	movs	r2, #16
 80028e2:	4013      	ands	r3, r2
 80028e4:	d100      	bne.n	80028e8 <HAL_UART_IRQHandler+0x2e4>
 80028e6:	e137      	b.n	8002b58 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028e8:	23a0      	movs	r3, #160	; 0xa0
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2210      	movs	r2, #16
 80028f0:	4013      	ands	r3, r2
 80028f2:	d100      	bne.n	80028f6 <HAL_UART_IRQHandler+0x2f2>
 80028f4:	e130      	b.n	8002b58 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2210      	movs	r2, #16
 80028fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	4013      	ands	r3, r2
 8002908:	2b40      	cmp	r3, #64	; 0x40
 800290a:	d000      	beq.n	800290e <HAL_UART_IRQHandler+0x30a>
 800290c:	e0a4      	b.n	8002a58 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	589b      	ldr	r3, [r3, r2]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	217e      	movs	r1, #126	; 0x7e
 800291a:	187b      	adds	r3, r7, r1
 800291c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800291e:	187b      	adds	r3, r7, r1
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d100      	bne.n	8002928 <HAL_UART_IRQHandler+0x324>
 8002926:	e185      	b.n	8002c34 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	225c      	movs	r2, #92	; 0x5c
 800292c:	5a9b      	ldrh	r3, [r3, r2]
 800292e:	187a      	adds	r2, r7, r1
 8002930:	8812      	ldrh	r2, [r2, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d300      	bcc.n	8002938 <HAL_UART_IRQHandler+0x334>
 8002936:	e17d      	b.n	8002c34 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	187a      	adds	r2, r7, r1
 800293c:	215e      	movs	r1, #94	; 0x5e
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	589b      	ldr	r3, [r3, r2]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2220      	movs	r2, #32
 800294e:	4013      	ands	r3, r2
 8002950:	d170      	bne.n	8002a34 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002952:	f3ef 8310 	mrs	r3, PRIMASK
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800295a:	67bb      	str	r3, [r7, #120]	; 0x78
 800295c:	2301      	movs	r3, #1
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	f383 8810 	msr	PRIMASK, r3
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	49b4      	ldr	r1, [pc, #720]	; (8002c44 <HAL_UART_IRQHandler+0x640>)
 8002974:	400a      	ands	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	f383 8810 	msr	PRIMASK, r3
}
 8002982:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002984:	f3ef 8310 	mrs	r3, PRIMASK
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	677b      	str	r3, [r7, #116]	; 0x74
 800298e:	2301      	movs	r3, #1
 8002990:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	438a      	bics	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80029bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029be:	673b      	str	r3, [r7, #112]	; 0x70
 80029c0:	2301      	movs	r3, #1
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c6:	f383 8810 	msr	PRIMASK, r3
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	438a      	bics	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e2:	f383 8810 	msr	PRIMASK, r3
}
 80029e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	228c      	movs	r2, #140	; 0x8c
 80029ec:	2120      	movs	r1, #32
 80029ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f6:	f3ef 8310 	mrs	r3, PRIMASK
 80029fa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a00:	2301      	movs	r3, #1
 8002a02:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a06:	f383 8810 	msr	PRIMASK, r3
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2110      	movs	r1, #16
 8002a18:	438a      	bics	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a22:	f383 8810 	msr	PRIMASK, r3
}
 8002a26:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	589b      	ldr	r3, [r3, r2]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7fe fa74 	bl	8000f1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	225c      	movs	r2, #92	; 0x5c
 8002a3e:	5a9a      	ldrh	r2, [r3, r2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	215e      	movs	r1, #94	; 0x5e
 8002a44:	5a5b      	ldrh	r3, [r3, r1]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f90d 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a56:	e0ed      	b.n	8002c34 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	225c      	movs	r2, #92	; 0x5c
 8002a5c:	5a99      	ldrh	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	225e      	movs	r2, #94	; 0x5e
 8002a62:	5a9b      	ldrh	r3, [r3, r2]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	208e      	movs	r0, #142	; 0x8e
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	1a8a      	subs	r2, r1, r2
 8002a6c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	225e      	movs	r2, #94	; 0x5e
 8002a72:	5a9b      	ldrh	r3, [r3, r2]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d100      	bne.n	8002a7c <HAL_UART_IRQHandler+0x478>
 8002a7a:	e0dd      	b.n	8002c38 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002a7c:	183b      	adds	r3, r7, r0
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d100      	bne.n	8002a86 <HAL_UART_IRQHandler+0x482>
 8002a84:	e0d8      	b.n	8002c38 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a86:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a8e:	2488      	movs	r4, #136	; 0x88
 8002a90:	193a      	adds	r2, r7, r4
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4967      	ldr	r1, [pc, #412]	; (8002c48 <HAL_UART_IRQHandler+0x644>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f383 8810 	msr	PRIMASK, r3
}
 8002abc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ac4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ac6:	2484      	movs	r4, #132	; 0x84
 8002ac8:	193a      	adds	r2, r7, r4
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	2301      	movs	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	495a      	ldr	r1, [pc, #360]	; (8002c4c <HAL_UART_IRQHandler+0x648>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f383 8810 	msr	PRIMASK, r3
}
 8002af4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	228c      	movs	r2, #140	; 0x8c
 8002afa:	2120      	movs	r1, #32
 8002afc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b12:	2480      	movs	r4, #128	; 0x80
 8002b14:	193a      	adds	r2, r7, r4
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	f383 8810 	msr	PRIMASK, r3
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2110      	movs	r1, #16
 8002b30:	438a      	bics	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	f383 8810 	msr	PRIMASK, r3
}
 8002b40:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2202      	movs	r2, #2
 8002b46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b48:	183b      	adds	r3, r7, r0
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0011      	movs	r1, r2
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f88d 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b56:	e06f      	b.n	8002c38 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b58:	23a4      	movs	r3, #164	; 0xa4
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	035b      	lsls	r3, r3, #13
 8002b62:	4013      	ands	r3, r2
 8002b64:	d010      	beq.n	8002b88 <HAL_UART_IRQHandler+0x584>
 8002b66:	239c      	movs	r3, #156	; 0x9c
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	03db      	lsls	r3, r3, #15
 8002b70:	4013      	ands	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0352      	lsls	r2, r2, #13
 8002b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f001 faf1 	bl	8004168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b86:	e05a      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b88:	23a4      	movs	r3, #164	; 0xa4
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	4013      	ands	r3, r2
 8002b92:	d016      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d106      	bne.n	8002bae <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ba0:	239c      	movs	r3, #156	; 0x9c
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	4013      	ands	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d042      	beq.n	8002c3c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	4798      	blx	r3
    }
    return;
 8002bc0:	e03c      	b.n	8002c3c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bc2:	23a4      	movs	r3, #164	; 0xa4
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00a      	beq.n	8002be4 <HAL_UART_IRQHandler+0x5e0>
 8002bce:	23a0      	movs	r3, #160	; 0xa0
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fe36 	bl	800384e <UART_EndTransmit_IT>
    return;
 8002be2:	e02c      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002be4:	23a4      	movs	r3, #164	; 0xa4
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <HAL_UART_IRQHandler+0x606>
 8002bf2:	23a0      	movs	r3, #160	; 0xa0
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	05db      	lsls	r3, r3, #23
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f001 fac0 	bl	8004188 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c08:	e019      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002c0a:	23a4      	movs	r3, #164	; 0xa4
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	045b      	lsls	r3, r3, #17
 8002c14:	4013      	ands	r3, r2
 8002c16:	d012      	beq.n	8002c3e <HAL_UART_IRQHandler+0x63a>
 8002c18:	23a0      	movs	r3, #160	; 0xa0
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da0d      	bge.n	8002c3e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f001 faa7 	bl	8004178 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c2a:	e008      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
      return;
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	e006      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
    return;
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	e004      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
      return;
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	e002      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
      return;
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	e000      	b.n	8002c3e <HAL_UART_IRQHandler+0x63a>
    return;
 8002c3c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b02a      	add	sp, #168	; 0xa8
 8002c42:	bdb0      	pop	{r4, r5, r7, pc}
 8002c44:	fffffeff 	.word	0xfffffeff
 8002c48:	fffffedf 	.word	0xfffffedf
 8002c4c:	effffffe 	.word	0xeffffffe

08002c50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1cbb      	adds	r3, r7, #2
 8002c7c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b090      	sub	sp, #64	; 0x40
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c90:	231a      	movs	r3, #26
 8002c92:	2220      	movs	r2, #32
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	19db      	adds	r3, r3, r7
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4ac4      	ldr	r2, [pc, #784]	; (8002fcc <UART_SetConfig+0x344>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4abf      	ldr	r2, [pc, #764]	; (8002fd0 <UART_SetConfig+0x348>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	68d9      	ldr	r1, [r3, #12]
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	0003      	movs	r3, r0
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4ab9      	ldr	r2, [pc, #740]	; (8002fd4 <UART_SetConfig+0x34c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4ab4      	ldr	r2, [pc, #720]	; (8002fd8 <UART_SetConfig+0x350>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	4393      	bics	r3, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	0003      	movs	r3, r0
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4aaa      	ldr	r2, [pc, #680]	; (8002fdc <UART_SetConfig+0x354>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d131      	bne.n	8002d9c <UART_SetConfig+0x114>
 8002d38:	4ba9      	ldr	r3, [pc, #676]	; (8002fe0 <UART_SetConfig+0x358>)
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d01d      	beq.n	8002d80 <UART_SetConfig+0xf8>
 8002d44:	d823      	bhi.n	8002d8e <UART_SetConfig+0x106>
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d00c      	beq.n	8002d64 <UART_SetConfig+0xdc>
 8002d4a:	d820      	bhi.n	8002d8e <UART_SetConfig+0x106>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <UART_SetConfig+0xce>
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d00e      	beq.n	8002d72 <UART_SetConfig+0xea>
 8002d54:	e01b      	b.n	8002d8e <UART_SetConfig+0x106>
 8002d56:	231b      	movs	r3, #27
 8002d58:	2220      	movs	r2, #32
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	19db      	adds	r3, r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e071      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002d64:	231b      	movs	r3, #27
 8002d66:	2220      	movs	r2, #32
 8002d68:	189b      	adds	r3, r3, r2
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e06a      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002d72:	231b      	movs	r3, #27
 8002d74:	2220      	movs	r2, #32
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e063      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002d80:	231b      	movs	r3, #27
 8002d82:	2220      	movs	r2, #32
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2208      	movs	r2, #8
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e05c      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002d8e:	231b      	movs	r3, #27
 8002d90:	2220      	movs	r2, #32
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	19db      	adds	r3, r3, r7
 8002d96:	2210      	movs	r2, #16
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e055      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a90      	ldr	r2, [pc, #576]	; (8002fe4 <UART_SetConfig+0x35c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d106      	bne.n	8002db4 <UART_SetConfig+0x12c>
 8002da6:	231b      	movs	r3, #27
 8002da8:	2220      	movs	r2, #32
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e049      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a86      	ldr	r2, [pc, #536]	; (8002fd4 <UART_SetConfig+0x34c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d13e      	bne.n	8002e3c <UART_SetConfig+0x1b4>
 8002dbe:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <UART_SetConfig+0x358>)
 8002dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	22c0      	movs	r2, #192	; 0xc0
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d027      	beq.n	8002e20 <UART_SetConfig+0x198>
 8002dd0:	22c0      	movs	r2, #192	; 0xc0
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d82a      	bhi.n	8002e2e <UART_SetConfig+0x1a6>
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d011      	beq.n	8002e04 <UART_SetConfig+0x17c>
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d822      	bhi.n	8002e2e <UART_SetConfig+0x1a6>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <UART_SetConfig+0x16e>
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	00d2      	lsls	r2, r2, #3
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <UART_SetConfig+0x18a>
 8002df4:	e01b      	b.n	8002e2e <UART_SetConfig+0x1a6>
 8002df6:	231b      	movs	r3, #27
 8002df8:	2220      	movs	r2, #32
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	19db      	adds	r3, r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e021      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002e04:	231b      	movs	r3, #27
 8002e06:	2220      	movs	r2, #32
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e01a      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002e12:	231b      	movs	r3, #27
 8002e14:	2220      	movs	r2, #32
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	19db      	adds	r3, r3, r7
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e013      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002e20:	231b      	movs	r3, #27
 8002e22:	2220      	movs	r2, #32
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e00c      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002e2e:	231b      	movs	r3, #27
 8002e30:	2220      	movs	r2, #32
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	19db      	adds	r3, r3, r7
 8002e36:	2210      	movs	r2, #16
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e005      	b.n	8002e48 <UART_SetConfig+0x1c0>
 8002e3c:	231b      	movs	r3, #27
 8002e3e:	2220      	movs	r2, #32
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	2210      	movs	r2, #16
 8002e46:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a61      	ldr	r2, [pc, #388]	; (8002fd4 <UART_SetConfig+0x34c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d000      	beq.n	8002e54 <UART_SetConfig+0x1cc>
 8002e52:	e092      	b.n	8002f7a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e54:	231b      	movs	r3, #27
 8002e56:	2220      	movs	r2, #32
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	19db      	adds	r3, r3, r7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d015      	beq.n	8002e8e <UART_SetConfig+0x206>
 8002e62:	dc18      	bgt.n	8002e96 <UART_SetConfig+0x20e>
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00d      	beq.n	8002e84 <UART_SetConfig+0x1fc>
 8002e68:	dc15      	bgt.n	8002e96 <UART_SetConfig+0x20e>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <UART_SetConfig+0x1ec>
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d005      	beq.n	8002e7e <UART_SetConfig+0x1f6>
 8002e72:	e010      	b.n	8002e96 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e74:	f7ff f8c8 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e7c:	e014      	b.n	8002ea8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e7e:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <UART_SetConfig+0x360>)
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e82:	e011      	b.n	8002ea8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e84:	f7ff f834 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e8c:	e00c      	b.n	8002ea8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e94:	e008      	b.n	8002ea8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e9a:	231a      	movs	r3, #26
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
        break;
 8002ea6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d100      	bne.n	8002eb0 <UART_SetConfig+0x228>
 8002eae:	e147      	b.n	8003140 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <UART_SetConfig+0x364>)
 8002eb6:	0052      	lsls	r2, r2, #1
 8002eb8:	5ad3      	ldrh	r3, [r2, r3]
 8002eba:	0019      	movs	r1, r3
 8002ebc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ebe:	f7fd f923 	bl	8000108 <__udivsi3>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	0013      	movs	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d305      	bcc.n	8002ee2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d906      	bls.n	8002ef0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8002ee2:	231a      	movs	r3, #26
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	19db      	adds	r3, r3, r7
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e127      	b.n	8003140 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <UART_SetConfig+0x364>)
 8002efe:	0052      	lsls	r2, r2, #1
 8002f00:	5ad3      	ldrh	r3, [r2, r3]
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	69b8      	ldr	r0, [r7, #24]
 8002f0e:	69f9      	ldr	r1, [r7, #28]
 8002f10:	f7fd fa70 	bl	80003f4 <__aeabi_uldivmod>
 8002f14:	0002      	movs	r2, r0
 8002f16:	000b      	movs	r3, r1
 8002f18:	0e11      	lsrs	r1, r2, #24
 8002f1a:	021d      	lsls	r5, r3, #8
 8002f1c:	430d      	orrs	r5, r1
 8002f1e:	0214      	lsls	r4, r2, #8
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68b8      	ldr	r0, [r7, #8]
 8002f2e:	68f9      	ldr	r1, [r7, #12]
 8002f30:	1900      	adds	r0, r0, r4
 8002f32:	4169      	adcs	r1, r5
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f7fd fa57 	bl	80003f4 <__aeabi_uldivmod>
 8002f46:	0002      	movs	r2, r0
 8002f48:	000b      	movs	r3, r1
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f50:	23c0      	movs	r3, #192	; 0xc0
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d309      	bcc.n	8002f6c <UART_SetConfig+0x2e4>
 8002f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	035b      	lsls	r3, r3, #13
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d204      	bcs.n	8002f6c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e0e9      	b.n	8003140 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f6c:	231a      	movs	r3, #26
 8002f6e:	2220      	movs	r2, #32
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	19db      	adds	r3, r3, r7
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e0e2      	b.n	8003140 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d000      	beq.n	8002f88 <UART_SetConfig+0x300>
 8002f86:	e083      	b.n	8003090 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002f88:	231b      	movs	r3, #27
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	19db      	adds	r3, r3, r7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d015      	beq.n	8002fc2 <UART_SetConfig+0x33a>
 8002f96:	dc2b      	bgt.n	8002ff0 <UART_SetConfig+0x368>
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d00d      	beq.n	8002fb8 <UART_SetConfig+0x330>
 8002f9c:	dc28      	bgt.n	8002ff0 <UART_SetConfig+0x368>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <UART_SetConfig+0x320>
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d005      	beq.n	8002fb2 <UART_SetConfig+0x32a>
 8002fa6:	e023      	b.n	8002ff0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7ff f82e 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 8002fac:	0003      	movs	r3, r0
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fb0:	e027      	b.n	8003002 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <UART_SetConfig+0x360>)
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fb6:	e024      	b.n	8003002 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb8:	f7fe ff9a 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fc0:	e01f      	b.n	8003002 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fc8:	e01b      	b.n	8003002 <UART_SetConfig+0x37a>
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	cfff69f3 	.word	0xcfff69f3
 8002fd0:	ffffcfff 	.word	0xffffcfff
 8002fd4:	40008000 	.word	0x40008000
 8002fd8:	11fff4ff 	.word	0x11fff4ff
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	080044a8 	.word	0x080044a8
      default:
        pclk = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ff4:	231a      	movs	r3, #26
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	19db      	adds	r3, r3, r7
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
        break;
 8003000:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	2b00      	cmp	r3, #0
 8003006:	d100      	bne.n	800300a <UART_SetConfig+0x382>
 8003008:	e09a      	b.n	8003140 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300e:	4b58      	ldr	r3, [pc, #352]	; (8003170 <UART_SetConfig+0x4e8>)
 8003010:	0052      	lsls	r2, r2, #1
 8003012:	5ad3      	ldrh	r3, [r2, r3]
 8003014:	0019      	movs	r1, r3
 8003016:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003018:	f7fd f876 	bl	8000108 <__udivsi3>
 800301c:	0003      	movs	r3, r0
 800301e:	005a      	lsls	r2, r3, #1
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	18d2      	adds	r2, r2, r3
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0019      	movs	r1, r3
 800302e:	0010      	movs	r0, r2
 8003030:	f7fd f86a 	bl	8000108 <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d921      	bls.n	8003082 <UART_SetConfig+0x3fa>
 800303e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	025b      	lsls	r3, r3, #9
 8003044:	429a      	cmp	r2, r3
 8003046:	d21c      	bcs.n	8003082 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	b29a      	uxth	r2, r3
 800304c:	200e      	movs	r0, #14
 800304e:	2420      	movs	r4, #32
 8003050:	1903      	adds	r3, r0, r4
 8003052:	19db      	adds	r3, r3, r7
 8003054:	210f      	movs	r1, #15
 8003056:	438a      	bics	r2, r1
 8003058:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	2207      	movs	r2, #7
 8003062:	4013      	ands	r3, r2
 8003064:	b299      	uxth	r1, r3
 8003066:	1903      	adds	r3, r0, r4
 8003068:	19db      	adds	r3, r3, r7
 800306a:	1902      	adds	r2, r0, r4
 800306c:	19d2      	adds	r2, r2, r7
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1902      	adds	r2, r0, r4
 800307a:	19d2      	adds	r2, r2, r7
 800307c:	8812      	ldrh	r2, [r2, #0]
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	e05e      	b.n	8003140 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003082:	231a      	movs	r3, #26
 8003084:	2220      	movs	r2, #32
 8003086:	189b      	adds	r3, r3, r2
 8003088:	19db      	adds	r3, r3, r7
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e057      	b.n	8003140 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003090:	231b      	movs	r3, #27
 8003092:	2220      	movs	r2, #32
 8003094:	189b      	adds	r3, r3, r2
 8003096:	19db      	adds	r3, r3, r7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d015      	beq.n	80030ca <UART_SetConfig+0x442>
 800309e:	dc18      	bgt.n	80030d2 <UART_SetConfig+0x44a>
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d00d      	beq.n	80030c0 <UART_SetConfig+0x438>
 80030a4:	dc15      	bgt.n	80030d2 <UART_SetConfig+0x44a>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <UART_SetConfig+0x428>
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d005      	beq.n	80030ba <UART_SetConfig+0x432>
 80030ae:	e010      	b.n	80030d2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7fe ffaa 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 80030b4:	0003      	movs	r3, r0
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030b8:	e014      	b.n	80030e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <UART_SetConfig+0x4ec>)
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030be:	e011      	b.n	80030e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c0:	f7fe ff16 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 80030c4:	0003      	movs	r3, r0
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030c8:	e00c      	b.n	80030e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030d0:	e008      	b.n	80030e4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030d6:	231a      	movs	r3, #26
 80030d8:	2220      	movs	r2, #32
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	19db      	adds	r3, r3, r7
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
        break;
 80030e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02a      	beq.n	8003140 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <UART_SetConfig+0x4e8>)
 80030f0:	0052      	lsls	r2, r2, #1
 80030f2:	5ad3      	ldrh	r3, [r2, r3]
 80030f4:	0019      	movs	r1, r3
 80030f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030f8:	f7fd f806 	bl	8000108 <__udivsi3>
 80030fc:	0003      	movs	r3, r0
 80030fe:	001a      	movs	r2, r3
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	18d2      	adds	r2, r2, r3
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0019      	movs	r1, r3
 800310e:	0010      	movs	r0, r2
 8003110:	f7fc fffa 	bl	8000108 <__udivsi3>
 8003114:	0003      	movs	r3, r0
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	2b0f      	cmp	r3, #15
 800311c:	d90a      	bls.n	8003134 <UART_SetConfig+0x4ac>
 800311e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	025b      	lsls	r3, r3, #9
 8003124:	429a      	cmp	r2, r3
 8003126:	d205      	bcs.n	8003134 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	b29a      	uxth	r2, r3
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	e005      	b.n	8003140 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003134:	231a      	movs	r3, #26
 8003136:	2220      	movs	r2, #32
 8003138:	189b      	adds	r3, r3, r2
 800313a:	19db      	adds	r3, r3, r7
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	226a      	movs	r2, #106	; 0x6a
 8003144:	2101      	movs	r1, #1
 8003146:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	2268      	movs	r2, #104	; 0x68
 800314c:	2101      	movs	r1, #1
 800314e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2200      	movs	r2, #0
 8003154:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	2200      	movs	r2, #0
 800315a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800315c:	231a      	movs	r3, #26
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	781b      	ldrb	r3, [r3, #0]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b010      	add	sp, #64	; 0x40
 800316c:	bdb0      	pop	{r4, r5, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	080044a8 	.word	0x080044a8
 8003174:	00f42400 	.word	0x00f42400

08003178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d00b      	beq.n	80031a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <UART_AdvFeatureConfig+0x144>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d00b      	beq.n	80031c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <UART_AdvFeatureConfig+0x148>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <UART_AdvFeatureConfig+0x14c>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	2208      	movs	r2, #8
 80031ec:	4013      	ands	r3, r2
 80031ee:	d00b      	beq.n	8003208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <UART_AdvFeatureConfig+0x150>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	2210      	movs	r2, #16
 800320e:	4013      	ands	r3, r2
 8003210:	d00b      	beq.n	800322a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_AdvFeatureConfig+0x154>)
 800321a:	4013      	ands	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	2220      	movs	r2, #32
 8003230:	4013      	ands	r3, r2
 8003232:	d00b      	beq.n	800324c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <UART_AdvFeatureConfig+0x158>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	2240      	movs	r2, #64	; 0x40
 8003252:	4013      	ands	r3, r2
 8003254:	d01d      	beq.n	8003292 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <UART_AdvFeatureConfig+0x15c>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	035b      	lsls	r3, r3, #13
 8003276:	429a      	cmp	r2, r3
 8003278:	d10b      	bne.n	8003292 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <UART_AdvFeatureConfig+0x160>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	4013      	ands	r3, r2
 800329a:	d00b      	beq.n	80032b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <UART_AdvFeatureConfig+0x164>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	fffdffff 	.word	0xfffdffff
 80032c0:	fffeffff 	.word	0xfffeffff
 80032c4:	fffbffff 	.word	0xfffbffff
 80032c8:	ffff7fff 	.word	0xffff7fff
 80032cc:	ffffefff 	.word	0xffffefff
 80032d0:	ffffdfff 	.word	0xffffdfff
 80032d4:	ffefffff 	.word	0xffefffff
 80032d8:	ff9fffff 	.word	0xff9fffff
 80032dc:	fff7ffff 	.word	0xfff7ffff

080032e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2290      	movs	r2, #144	; 0x90
 80032ec:	2100      	movs	r1, #0
 80032ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f0:	f7fd fd08 	bl	8000d04 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2208      	movs	r2, #8
 8003300:	4013      	ands	r3, r2
 8003302:	2b08      	cmp	r3, #8
 8003304:	d10c      	bne.n	8003320 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	0391      	lsls	r1, r2, #14
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <UART_CheckIdleState+0x98>)
 8003310:	9200      	str	r2, [sp, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	f000 f832 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 8003318:	1e03      	subs	r3, r0, #0
 800331a:	d001      	beq.n	8003320 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e026      	b.n	800336e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	2b04      	cmp	r3, #4
 800332c:	d10c      	bne.n	8003348 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	03d1      	lsls	r1, r2, #15
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <UART_CheckIdleState+0x98>)
 8003338:	9200      	str	r2, [sp, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	f000 f81e 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d001      	beq.n	8003348 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e012      	b.n	800336e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2288      	movs	r2, #136	; 0x88
 800334c:	2120      	movs	r1, #32
 800334e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	228c      	movs	r2, #140	; 0x8c
 8003354:	2120      	movs	r1, #32
 8003356:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2284      	movs	r2, #132	; 0x84
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b004      	add	sp, #16
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	01ffffff 	.word	0x01ffffff

0800337c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338c:	e0a7      	b.n	80034de <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003390:	3301      	adds	r3, #1
 8003392:	d100      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003394:	e0a3      	b.n	80034de <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fd fcb5 	bl	8000d04 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <UART_WaitOnFlagUntilTimeout+0x30>
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d13f      	bne.n	800342c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ac:	f3ef 8310 	mrs	r3, PRIMASK
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
 80033b6:	2301      	movs	r3, #1
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	494e      	ldr	r1, [pc, #312]	; (8003508 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80033ce:	400a      	ands	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033de:	f3ef 8310 	mrs	r3, PRIMASK
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
 80033e8:	2301      	movs	r3, #1
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	438a      	bics	r2, r1
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2288      	movs	r2, #136	; 0x88
 8003414:	2120      	movs	r1, #32
 8003416:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	228c      	movs	r2, #140	; 0x8c
 800341c:	2120      	movs	r1, #32
 800341e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2284      	movs	r2, #132	; 0x84
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e069      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2204      	movs	r2, #4
 8003434:	4013      	ands	r3, r2
 8003436:	d052      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	401a      	ands	r2, r3
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	429a      	cmp	r2, r3
 800344a:	d148      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003456:	f3ef 8310 	mrs	r3, PRIMASK
 800345a:	613b      	str	r3, [r7, #16]
  return(result);
 800345c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800345e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f383 8810 	msr	PRIMASK, r3
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4924      	ldr	r1, [pc, #144]	; (8003508 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f383 8810 	msr	PRIMASK, r3
}
 8003486:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003488:	f3ef 8310 	mrs	r3, PRIMASK
 800348c:	61fb      	str	r3, [r7, #28]
  return(result);
 800348e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
 8003492:	2301      	movs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f383 8810 	msr	PRIMASK, r3
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2101      	movs	r1, #1
 80034aa:	438a      	bics	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f383 8810 	msr	PRIMASK, r3
}
 80034b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2288      	movs	r2, #136	; 0x88
 80034be:	2120      	movs	r1, #32
 80034c0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	228c      	movs	r2, #140	; 0x8c
 80034c6:	2120      	movs	r1, #32
 80034c8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2290      	movs	r2, #144	; 0x90
 80034ce:	2120      	movs	r1, #32
 80034d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2284      	movs	r2, #132	; 0x84
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e010      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	425a      	negs	r2, r3
 80034ee:	4153      	adcs	r3, r2
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	001a      	movs	r2, r3
 80034f4:	1dfb      	adds	r3, r7, #7
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d100      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x182>
 80034fc:	e747      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b014      	add	sp, #80	; 0x50
 8003506:	bd80      	pop	{r7, pc}
 8003508:	fffffe5f 	.word	0xfffffe5f

0800350c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b098      	sub	sp, #96	; 0x60
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	1dbb      	adds	r3, r7, #6
 8003518:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1dba      	adds	r2, r7, #6
 8003524:	215c      	movs	r1, #92	; 0x5c
 8003526:	8812      	ldrh	r2, [r2, #0]
 8003528:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1dba      	adds	r2, r7, #6
 800352e:	215e      	movs	r1, #94	; 0x5e
 8003530:	8812      	ldrh	r2, [r2, #0]
 8003532:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	015b      	lsls	r3, r3, #5
 8003542:	429a      	cmp	r2, r3
 8003544:	d10d      	bne.n	8003562 <UART_Start_Receive_IT+0x56>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <UART_Start_Receive_IT+0x4c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2260      	movs	r2, #96	; 0x60
 8003552:	497b      	ldr	r1, [pc, #492]	; (8003740 <UART_Start_Receive_IT+0x234>)
 8003554:	5299      	strh	r1, [r3, r2]
 8003556:	e02e      	b.n	80035b6 <UART_Start_Receive_IT+0xaa>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2260      	movs	r2, #96	; 0x60
 800355c:	21ff      	movs	r1, #255	; 0xff
 800355e:	5299      	strh	r1, [r3, r2]
 8003560:	e029      	b.n	80035b6 <UART_Start_Receive_IT+0xaa>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <UART_Start_Receive_IT+0x7a>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <UART_Start_Receive_IT+0x70>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2260      	movs	r2, #96	; 0x60
 8003576:	21ff      	movs	r1, #255	; 0xff
 8003578:	5299      	strh	r1, [r3, r2]
 800357a:	e01c      	b.n	80035b6 <UART_Start_Receive_IT+0xaa>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2260      	movs	r2, #96	; 0x60
 8003580:	217f      	movs	r1, #127	; 0x7f
 8003582:	5299      	strh	r1, [r3, r2]
 8003584:	e017      	b.n	80035b6 <UART_Start_Receive_IT+0xaa>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	055b      	lsls	r3, r3, #21
 800358e:	429a      	cmp	r2, r3
 8003590:	d10d      	bne.n	80035ae <UART_Start_Receive_IT+0xa2>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <UART_Start_Receive_IT+0x98>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2260      	movs	r2, #96	; 0x60
 800359e:	217f      	movs	r1, #127	; 0x7f
 80035a0:	5299      	strh	r1, [r3, r2]
 80035a2:	e008      	b.n	80035b6 <UART_Start_Receive_IT+0xaa>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2260      	movs	r2, #96	; 0x60
 80035a8:	213f      	movs	r1, #63	; 0x3f
 80035aa:	5299      	strh	r1, [r3, r2]
 80035ac:	e003      	b.n	80035b6 <UART_Start_Receive_IT+0xaa>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2260      	movs	r2, #96	; 0x60
 80035b2:	2100      	movs	r1, #0
 80035b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2290      	movs	r2, #144	; 0x90
 80035ba:	2100      	movs	r1, #0
 80035bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	228c      	movs	r2, #140	; 0x8c
 80035c2:	2122      	movs	r1, #34	; 0x22
 80035c4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d0:	2301      	movs	r3, #1
 80035d2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ee:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	059b      	lsls	r3, r3, #22
 8003600:	429a      	cmp	r2, r3
 8003602:	d150      	bne.n	80036a6 <UART_Start_Receive_IT+0x19a>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2268      	movs	r2, #104	; 0x68
 8003608:	5a9b      	ldrh	r3, [r3, r2]
 800360a:	1dba      	adds	r2, r7, #6
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d349      	bcc.n	80036a6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	015b      	lsls	r3, r3, #5
 800361a:	429a      	cmp	r2, r3
 800361c:	d107      	bne.n	800362e <UART_Start_Receive_IT+0x122>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a46      	ldr	r2, [pc, #280]	; (8003744 <UART_Start_Receive_IT+0x238>)
 800362a:	675a      	str	r2, [r3, #116]	; 0x74
 800362c:	e002      	b.n	8003634 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a45      	ldr	r2, [pc, #276]	; (8003748 <UART_Start_Receive_IT+0x23c>)
 8003632:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d019      	beq.n	8003670 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363c:	f3ef 8310 	mrs	r3, PRIMASK
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003644:	65bb      	str	r3, [r7, #88]	; 0x58
 8003646:	2301      	movs	r3, #1
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f383 8810 	msr	PRIMASK, r3
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	0049      	lsls	r1, r1, #1
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366a:	f383 8810 	msr	PRIMASK, r3
}
 800366e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003670:	f3ef 8310 	mrs	r3, PRIMASK
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003678:	657b      	str	r3, [r7, #84]	; 0x54
 800367a:	2301      	movs	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0549      	lsls	r1, r1, #21
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	e047      	b.n	8003736 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	015b      	lsls	r3, r3, #5
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d107      	bne.n	80036c2 <UART_Start_Receive_IT+0x1b6>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a23      	ldr	r2, [pc, #140]	; (800374c <UART_Start_Receive_IT+0x240>)
 80036be:	675a      	str	r2, [r3, #116]	; 0x74
 80036c0:	e002      	b.n	80036c8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <UART_Start_Receive_IT+0x244>)
 80036c6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d019      	beq.n	8003704 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d0:	f3ef 8310 	mrs	r3, PRIMASK
 80036d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80036d6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80036d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036da:	2301      	movs	r3, #1
 80036dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2190      	movs	r1, #144	; 0x90
 80036f2:	0049      	lsls	r1, r1, #1
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	e018      	b.n	8003736 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003704:	f3ef 8310 	mrs	r3, PRIMASK
 8003708:	613b      	str	r3, [r7, #16]
  return(result);
 800370a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800370c:	653b      	str	r3, [r7, #80]	; 0x50
 800370e:	2301      	movs	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2120      	movs	r1, #32
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f383 8810 	msr	PRIMASK, r3
}
 8003734:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b018      	add	sp, #96	; 0x60
 800373e:	bd80      	pop	{r7, pc}
 8003740:	000001ff 	.word	0x000001ff
 8003744:	08003e7d 	.word	0x08003e7d
 8003748:	08003b91 	.word	0x08003b91
 800374c:	08003a1d 	.word	0x08003a1d
 8003750:	080038a9 	.word	0x080038a9

08003754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	617b      	str	r3, [r7, #20]
  return(result);
 8003762:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4926      	ldr	r1, [pc, #152]	; (8003818 <UART_EndRxTransfer+0xc4>)
 800377e:	400a      	ands	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378e:	f3ef 8310 	mrs	r3, PRIMASK
 8003792:	623b      	str	r3, [r7, #32]
  return(result);
 8003794:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
 8003798:	2301      	movs	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	491b      	ldr	r1, [pc, #108]	; (800381c <UART_EndRxTransfer+0xc8>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	f383 8810 	msr	PRIMASK, r3
}
 80037be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d118      	bne.n	80037fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	2301      	movs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2110      	movs	r1, #16
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	228c      	movs	r2, #140	; 0x8c
 80037fe:	2120      	movs	r1, #32
 8003800:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b00e      	add	sp, #56	; 0x38
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	fffffedf 	.word	0xfffffedf
 800381c:	effffffe 	.word	0xeffffffe

08003820 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	225e      	movs	r2, #94	; 0x5e
 8003832:	2100      	movs	r1, #0
 8003834:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2256      	movs	r2, #86	; 0x56
 800383a:	2100      	movs	r1, #0
 800383c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fa0d 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}

0800384e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003856:	f3ef 8310 	mrs	r3, PRIMASK
 800385a:	60bb      	str	r3, [r7, #8]
  return(result);
 800385c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	2301      	movs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2140      	movs	r1, #64	; 0x40
 8003878:	438a      	bics	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f383 8810 	msr	PRIMASK, r3
}
 8003886:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2288      	movs	r2, #136	; 0x88
 800388c:	2120      	movs	r1, #32
 800388e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f7ff f9d9 	bl	8002c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b006      	add	sp, #24
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b090      	sub	sp, #64	; 0x40
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038b0:	203e      	movs	r0, #62	; 0x3e
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2160      	movs	r1, #96	; 0x60
 80038b8:	5a52      	ldrh	r2, [r2, r1]
 80038ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	228c      	movs	r2, #140	; 0x8c
 80038c0:	589b      	ldr	r3, [r3, r2]
 80038c2:	2b22      	cmp	r3, #34	; 0x22
 80038c4:	d000      	beq.n	80038c8 <UART_RxISR_8BIT+0x20>
 80038c6:	e09a      	b.n	80039fe <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ce:	213c      	movs	r1, #60	; 0x3c
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	183b      	adds	r3, r7, r0
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b2d9      	uxtb	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	400a      	ands	r2, r1
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	225e      	movs	r2, #94	; 0x5e
 80038f8:	5a9b      	ldrh	r3, [r3, r2]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b299      	uxth	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	225e      	movs	r2, #94	; 0x5e
 8003904:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	225e      	movs	r2, #94	; 0x5e
 800390a:	5a9b      	ldrh	r3, [r3, r2]
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d000      	beq.n	8003914 <UART_RxISR_8BIT+0x6c>
 8003912:	e07c      	b.n	8003a0e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003914:	f3ef 8310 	mrs	r3, PRIMASK
 8003918:	61bb      	str	r3, [r7, #24]
  return(result);
 800391a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38
 800391e:	2301      	movs	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f383 8810 	msr	PRIMASK, r3
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4938      	ldr	r1, [pc, #224]	; (8003a18 <UART_RxISR_8BIT+0x170>)
 8003936:	400a      	ands	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f383 8810 	msr	PRIMASK, r3
}
 8003944:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
 8003950:	2301      	movs	r3, #1
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	228c      	movs	r2, #140	; 0x8c
 800397c:	2120      	movs	r1, #32
 800397e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d12f      	bne.n	80039f4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	60fb      	str	r3, [r7, #12]
  return(result);
 80039a0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
 80039a4:	2301      	movs	r3, #1
 80039a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2110      	movs	r1, #16
 80039bc:	438a      	bics	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	2210      	movs	r2, #16
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d103      	bne.n	80039e2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2210      	movs	r2, #16
 80039e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	225c      	movs	r2, #92	; 0x5c
 80039e6:	5a9a      	ldrh	r2, [r3, r2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0011      	movs	r1, r2
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff f93f 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039f2:	e00c      	b.n	8003a0e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fc fe12 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 80039fc:	e007      	b.n	8003a0e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2108      	movs	r1, #8
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b010      	add	sp, #64	; 0x40
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	fffffedf 	.word	0xfffffedf

08003a1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b090      	sub	sp, #64	; 0x40
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a24:	203e      	movs	r0, #62	; 0x3e
 8003a26:	183b      	adds	r3, r7, r0
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	2160      	movs	r1, #96	; 0x60
 8003a2c:	5a52      	ldrh	r2, [r2, r1]
 8003a2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	228c      	movs	r2, #140	; 0x8c
 8003a34:	589b      	ldr	r3, [r3, r2]
 8003a36:	2b22      	cmp	r3, #34	; 0x22
 8003a38:	d000      	beq.n	8003a3c <UART_RxISR_16BIT+0x20>
 8003a3a:	e09a      	b.n	8003b72 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a42:	213c      	movs	r1, #60	; 0x3c
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	183a      	adds	r2, r7, r0
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	8812      	ldrh	r2, [r2, #0]
 8003a56:	4013      	ands	r3, r2
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	225e      	movs	r2, #94	; 0x5e
 8003a6c:	5a9b      	ldrh	r3, [r3, r2]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b299      	uxth	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	225e      	movs	r2, #94	; 0x5e
 8003a78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	225e      	movs	r2, #94	; 0x5e
 8003a7e:	5a9b      	ldrh	r3, [r3, r2]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d000      	beq.n	8003a88 <UART_RxISR_16BIT+0x6c>
 8003a86:	e07c      	b.n	8003b82 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a88:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4938      	ldr	r1, [pc, #224]	; (8003b8c <UART_RxISR_16BIT+0x170>)
 8003aaa:	400a      	ands	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aba:	f3ef 8310 	mrs	r3, PRIMASK
 8003abe:	623b      	str	r3, [r7, #32]
  return(result);
 8003ac0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	f383 8810 	msr	PRIMASK, r3
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2101      	movs	r1, #1
 8003adc:	438a      	bics	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	f383 8810 	msr	PRIMASK, r3
}
 8003aea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	228c      	movs	r2, #140	; 0x8c
 8003af0:	2120      	movs	r1, #32
 8003af2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d12f      	bne.n	8003b68 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b14:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b18:	2301      	movs	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2110      	movs	r1, #16
 8003b30:	438a      	bics	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2210      	movs	r2, #16
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d103      	bne.n	8003b56 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2210      	movs	r2, #16
 8003b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	225c      	movs	r2, #92	; 0x5c
 8003b5a:	5a9a      	ldrh	r2, [r3, r2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7ff f885 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b66:	e00c      	b.n	8003b82 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fc fd58 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 8003b70:	e007      	b.n	8003b82 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	619a      	str	r2, [r3, #24]
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b010      	add	sp, #64	; 0x40
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	fffffedf 	.word	0xfffffedf

08003b90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b09c      	sub	sp, #112	; 0x70
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003b98:	236a      	movs	r3, #106	; 0x6a
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	2160      	movs	r1, #96	; 0x60
 8003ba0:	5a52      	ldrh	r2, [r2, r1]
 8003ba2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	228c      	movs	r2, #140	; 0x8c
 8003bc0:	589b      	ldr	r3, [r3, r2]
 8003bc2:	2b22      	cmp	r3, #34	; 0x22
 8003bc4:	d000      	beq.n	8003bc8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003bc6:	e144      	b.n	8003e52 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003bc8:	235e      	movs	r3, #94	; 0x5e
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	2168      	movs	r1, #104	; 0x68
 8003bd0:	5a52      	ldrh	r2, [r2, r1]
 8003bd2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003bd4:	e0eb      	b.n	8003dae <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bdc:	215c      	movs	r1, #92	; 0x5c
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	236a      	movs	r3, #106	; 0x6a
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b2d9      	uxtb	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	225e      	movs	r2, #94	; 0x5e
 8003c08:	5a9b      	ldrh	r3, [r3, r2]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	225e      	movs	r2, #94	; 0x5e
 8003c14:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	2207      	movs	r2, #7
 8003c22:	4013      	ands	r3, r2
 8003c24:	d049      	beq.n	8003cba <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d010      	beq.n	8003c50 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4013      	ands	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2290      	movs	r2, #144	; 0x90
 8003c44:	589b      	ldr	r3, [r3, r2]
 8003c46:	2201      	movs	r2, #1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2190      	movs	r1, #144	; 0x90
 8003c4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	2202      	movs	r2, #2
 8003c54:	4013      	ands	r3, r2
 8003c56:	d00f      	beq.n	8003c78 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2202      	movs	r2, #2
 8003c66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2290      	movs	r2, #144	; 0x90
 8003c6c:	589b      	ldr	r3, [r3, r2]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2190      	movs	r1, #144	; 0x90
 8003c76:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c82:	2201      	movs	r2, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2290      	movs	r2, #144	; 0x90
 8003c94:	589b      	ldr	r3, [r3, r2]
 8003c96:	2202      	movs	r2, #2
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2190      	movs	r1, #144	; 0x90
 8003c9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2290      	movs	r2, #144	; 0x90
 8003ca4:	589b      	ldr	r3, [r3, r2]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7fe ffd7 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2290      	movs	r2, #144	; 0x90
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	225e      	movs	r2, #94	; 0x5e
 8003cbe:	5a9b      	ldrh	r3, [r3, r2]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d173      	bne.n	8003dae <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4961      	ldr	r1, [pc, #388]	; (8003e6c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	f383 8810 	msr	PRIMASK, r3
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
 8003d02:	2301      	movs	r3, #1
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4955      	ldr	r1, [pc, #340]	; (8003e70 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	228c      	movs	r2, #140	; 0x8c
 8003d2e:	2120      	movs	r1, #32
 8003d30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d12f      	bne.n	8003da6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d50:	623b      	str	r3, [r7, #32]
  return(result);
 8003d52:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	653b      	str	r3, [r7, #80]	; 0x50
 8003d56:	2301      	movs	r3, #1
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	438a      	bics	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2210      	movs	r2, #16
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d103      	bne.n	8003d94 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	225c      	movs	r2, #92	; 0x5c
 8003d98:	5a9a      	ldrh	r2, [r3, r2]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0011      	movs	r1, r2
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7fe ff66 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
 8003da4:	e003      	b.n	8003dae <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc fc39 	bl	8000620 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003dae:	235e      	movs	r3, #94	; 0x5e
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	2220      	movs	r2, #32
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d000      	beq.n	8003dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8003dc0:	e709      	b.n	8003bd6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003dc2:	204e      	movs	r0, #78	; 0x4e
 8003dc4:	183b      	adds	r3, r7, r0
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	215e      	movs	r1, #94	; 0x5e
 8003dca:	5a52      	ldrh	r2, [r2, r1]
 8003dcc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003dce:	0001      	movs	r1, r0
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d044      	beq.n	8003e62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2268      	movs	r2, #104	; 0x68
 8003ddc:	5a9b      	ldrh	r3, [r3, r2]
 8003dde:	187a      	adds	r2, r7, r1
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d23d      	bcs.n	8003e62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df0:	2301      	movs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	491b      	ldr	r1, [pc, #108]	; (8003e74 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003e1c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e22:	617b      	str	r3, [r7, #20]
  return(result);
 8003e24:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
 8003e28:	2301      	movs	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2120      	movs	r1, #32
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e50:	e007      	b.n	8003e62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2108      	movs	r1, #8
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b01c      	add	sp, #112	; 0x70
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	fffffeff 	.word	0xfffffeff
 8003e70:	effffffe 	.word	0xeffffffe
 8003e74:	efffffff 	.word	0xefffffff
 8003e78:	080038a9 	.word	0x080038a9

08003e7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b09e      	sub	sp, #120	; 0x78
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003e84:	2372      	movs	r3, #114	; 0x72
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	2160      	movs	r1, #96	; 0x60
 8003e8c:	5a52      	ldrh	r2, [r2, r1]
 8003e8e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	228c      	movs	r2, #140	; 0x8c
 8003eac:	589b      	ldr	r3, [r3, r2]
 8003eae:	2b22      	cmp	r3, #34	; 0x22
 8003eb0:	d000      	beq.n	8003eb4 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003eb2:	e144      	b.n	800413e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003eb4:	2366      	movs	r3, #102	; 0x66
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	2168      	movs	r1, #104	; 0x68
 8003ebc:	5a52      	ldrh	r2, [r2, r1]
 8003ebe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ec0:	e0eb      	b.n	800409a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec8:	2164      	movs	r1, #100	; 0x64
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	2272      	movs	r2, #114	; 0x72
 8003ed8:	18ba      	adds	r2, r7, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	8812      	ldrh	r2, [r2, #0]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	225e      	movs	r2, #94	; 0x5e
 8003ef4:	5a9b      	ldrh	r3, [r3, r2]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b299      	uxth	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	225e      	movs	r2, #94	; 0x5e
 8003f00:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d049      	beq.n	8003fa6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f14:	2201      	movs	r2, #1
 8003f16:	4013      	ands	r3, r2
 8003f18:	d010      	beq.n	8003f3c <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003f1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2290      	movs	r2, #144	; 0x90
 8003f30:	589b      	ldr	r3, [r3, r2]
 8003f32:	2201      	movs	r2, #1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2190      	movs	r1, #144	; 0x90
 8003f3a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d00f      	beq.n	8003f64 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f46:	2201      	movs	r2, #1
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2202      	movs	r2, #2
 8003f52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2290      	movs	r2, #144	; 0x90
 8003f58:	589b      	ldr	r3, [r3, r2]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2190      	movs	r1, #144	; 0x90
 8003f62:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f66:	2204      	movs	r2, #4
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <UART_RxISR_16BIT_FIFOEN+0x110>
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4013      	ands	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2290      	movs	r2, #144	; 0x90
 8003f80:	589b      	ldr	r3, [r3, r2]
 8003f82:	2202      	movs	r2, #2
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2190      	movs	r1, #144	; 0x90
 8003f8a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2290      	movs	r2, #144	; 0x90
 8003f90:	589b      	ldr	r3, [r3, r2]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fe fe61 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2290      	movs	r2, #144	; 0x90
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	225e      	movs	r2, #94	; 0x5e
 8003faa:	5a9b      	ldrh	r3, [r3, r2]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d173      	bne.n	800409a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4961      	ldr	r1, [pc, #388]	; (8004158 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fee:	2301      	movs	r3, #1
 8003ff0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4955      	ldr	r1, [pc, #340]	; (800415c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004006:	400a      	ands	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	228c      	movs	r2, #140	; 0x8c
 800401a:	2120      	movs	r1, #32
 800401c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402e:	2b01      	cmp	r3, #1
 8004030:	d12f      	bne.n	8004092 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	657b      	str	r3, [r7, #84]	; 0x54
 8004042:	2301      	movs	r3, #1
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2110      	movs	r1, #16
 800405a:	438a      	bics	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	2210      	movs	r2, #16
 8004072:	4013      	ands	r3, r2
 8004074:	2b10      	cmp	r3, #16
 8004076:	d103      	bne.n	8004080 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	225c      	movs	r2, #92	; 0x5c
 8004084:	5a9a      	ldrh	r2, [r3, r2]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0011      	movs	r1, r2
 800408a:	0018      	movs	r0, r3
 800408c:	f7fe fdf0 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
 8004090:	e003      	b.n	800409a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7fc fac3 	bl	8000620 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800409a:	2366      	movs	r3, #102	; 0x66
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d004      	beq.n	80040ae <UART_RxISR_16BIT_FIFOEN+0x232>
 80040a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
 80040aa:	d000      	beq.n	80040ae <UART_RxISR_16BIT_FIFOEN+0x232>
 80040ac:	e709      	b.n	8003ec2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80040ae:	2052      	movs	r0, #82	; 0x52
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	215e      	movs	r1, #94	; 0x5e
 80040b6:	5a52      	ldrh	r2, [r2, r1]
 80040b8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80040ba:	0001      	movs	r1, r0
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d044      	beq.n	800414e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2268      	movs	r2, #104	; 0x68
 80040c8:	5a9b      	ldrh	r3, [r3, r2]
 80040ca:	187a      	adds	r2, r7, r1
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d23d      	bcs.n	800414e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80040d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	2301      	movs	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	491b      	ldr	r1, [pc, #108]	; (8004160 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8004108:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410a:	f3ef 8310 	mrs	r3, PRIMASK
 800410e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004110:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	2301      	movs	r3, #1
 8004116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2120      	movs	r1, #32
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004132:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800413c:	e007      	b.n	800414e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2108      	movs	r1, #8
 800414a:	430a      	orrs	r2, r1
 800414c:	619a      	str	r2, [r3, #24]
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b01e      	add	sp, #120	; 0x78
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	fffffeff 	.word	0xfffffeff
 800415c:	effffffe 	.word	0xeffffffe
 8004160:	efffffff 	.word	0xefffffff
 8004164:	08003a1d 	.word	0x08003a1d

08004168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2284      	movs	r2, #132	; 0x84
 80041a4:	5c9b      	ldrb	r3, [r3, r2]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_UARTEx_DisableFifoMode+0x16>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e027      	b.n	80041fe <HAL_UARTEx_DisableFifoMode+0x66>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2284      	movs	r2, #132	; 0x84
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2288      	movs	r2, #136	; 0x88
 80041ba:	2124      	movs	r1, #36	; 0x24
 80041bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2101      	movs	r1, #1
 80041d2:	438a      	bics	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <HAL_UARTEx_DisableFifoMode+0x70>)
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2288      	movs	r2, #136	; 0x88
 80041f0:	2120      	movs	r1, #32
 80041f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2284      	movs	r2, #132	; 0x84
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b004      	add	sp, #16
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	dfffffff 	.word	0xdfffffff

0800420c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2284      	movs	r2, #132	; 0x84
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004220:	2302      	movs	r3, #2
 8004222:	e02e      	b.n	8004282 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2284      	movs	r2, #132	; 0x84
 8004228:	2101      	movs	r1, #1
 800422a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2288      	movs	r2, #136	; 0x88
 8004230:	2124      	movs	r1, #36	; 0x24
 8004232:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2101      	movs	r1, #1
 8004248:	438a      	bics	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	08d9      	lsrs	r1, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f000 f854 	bl	8004310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2288      	movs	r2, #136	; 0x88
 8004274:	2120      	movs	r1, #32
 8004276:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2284      	movs	r2, #132	; 0x84
 800427c:	2100      	movs	r1, #0
 800427e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b004      	add	sp, #16
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2284      	movs	r2, #132	; 0x84
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e02f      	b.n	8004304 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2284      	movs	r2, #132	; 0x84
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2288      	movs	r2, #136	; 0x88
 80042b0:	2124      	movs	r1, #36	; 0x24
 80042b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2101      	movs	r1, #1
 80042c8:	438a      	bics	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	0019      	movs	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 f813 	bl	8004310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2288      	movs	r2, #136	; 0x88
 80042f6:	2120      	movs	r1, #32
 80042f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2284      	movs	r2, #132	; 0x84
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b004      	add	sp, #16
 800430a:	bd80      	pop	{r7, pc}
 800430c:	f1ffffff 	.word	0xf1ffffff

08004310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431c:	2b00      	cmp	r3, #0
 800431e:	d108      	bne.n	8004332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	226a      	movs	r2, #106	; 0x6a
 8004324:	2101      	movs	r1, #1
 8004326:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2268      	movs	r2, #104	; 0x68
 800432c:	2101      	movs	r1, #1
 800432e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004330:	e043      	b.n	80043ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004332:	260f      	movs	r6, #15
 8004334:	19bb      	adds	r3, r7, r6
 8004336:	2208      	movs	r2, #8
 8004338:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800433a:	200e      	movs	r0, #14
 800433c:	183b      	adds	r3, r7, r0
 800433e:	2208      	movs	r2, #8
 8004340:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	0e5b      	lsrs	r3, r3, #25
 800434a:	b2da      	uxtb	r2, r3
 800434c:	240d      	movs	r4, #13
 800434e:	193b      	adds	r3, r7, r4
 8004350:	2107      	movs	r1, #7
 8004352:	400a      	ands	r2, r1
 8004354:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	0f5b      	lsrs	r3, r3, #29
 800435e:	b2da      	uxtb	r2, r3
 8004360:	250c      	movs	r5, #12
 8004362:	197b      	adds	r3, r7, r5
 8004364:	2107      	movs	r1, #7
 8004366:	400a      	ands	r2, r1
 8004368:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800436a:	183b      	adds	r3, r7, r0
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	197a      	adds	r2, r7, r5
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	4914      	ldr	r1, [pc, #80]	; (80043c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004374:	5c8a      	ldrb	r2, [r1, r2]
 8004376:	435a      	muls	r2, r3
 8004378:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800437a:	197b      	adds	r3, r7, r5
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004382:	0019      	movs	r1, r3
 8004384:	f7fb ff4a 	bl	800021c <__divsi3>
 8004388:	0003      	movs	r3, r0
 800438a:	b299      	uxth	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	226a      	movs	r2, #106	; 0x6a
 8004390:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004392:	19bb      	adds	r3, r7, r6
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	193a      	adds	r2, r7, r4
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	490a      	ldr	r1, [pc, #40]	; (80043c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800439c:	5c8a      	ldrb	r2, [r1, r2]
 800439e:	435a      	muls	r2, r3
 80043a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80043a2:	193b      	adds	r3, r7, r4
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80043a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043aa:	0019      	movs	r1, r3
 80043ac:	f7fb ff36 	bl	800021c <__divsi3>
 80043b0:	0003      	movs	r3, r0
 80043b2:	b299      	uxth	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2268      	movs	r2, #104	; 0x68
 80043b8:	5299      	strh	r1, [r3, r2]
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b005      	add	sp, #20
 80043c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	080044c0 	.word	0x080044c0
 80043c8:	080044c8 	.word	0x080044c8

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	2600      	movs	r6, #0
 80043d0:	4d0c      	ldr	r5, [pc, #48]	; (8004404 <__libc_init_array+0x38>)
 80043d2:	4c0d      	ldr	r4, [pc, #52]	; (8004408 <__libc_init_array+0x3c>)
 80043d4:	1b64      	subs	r4, r4, r5
 80043d6:	10a4      	asrs	r4, r4, #2
 80043d8:	42a6      	cmp	r6, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	2600      	movs	r6, #0
 80043de:	f000 f821 	bl	8004424 <_init>
 80043e2:	4d0a      	ldr	r5, [pc, #40]	; (800440c <__libc_init_array+0x40>)
 80043e4:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <__libc_init_array+0x44>)
 80043e6:	1b64      	subs	r4, r4, r5
 80043e8:	10a4      	asrs	r4, r4, #2
 80043ea:	42a6      	cmp	r6, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	00b3      	lsls	r3, r6, #2
 80043f2:	58eb      	ldr	r3, [r5, r3]
 80043f4:	4798      	blx	r3
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	00b3      	lsls	r3, r6, #2
 80043fc:	58eb      	ldr	r3, [r5, r3]
 80043fe:	4798      	blx	r3
 8004400:	3601      	adds	r6, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	080044d8 	.word	0x080044d8
 8004408:	080044d8 	.word	0x080044d8
 800440c:	080044d8 	.word	0x080044d8
 8004410:	080044dc 	.word	0x080044dc

08004414 <memset>:
 8004414:	0003      	movs	r3, r0
 8004416:	1882      	adds	r2, r0, r2
 8004418:	4293      	cmp	r3, r2
 800441a:	d100      	bne.n	800441e <memset+0xa>
 800441c:	4770      	bx	lr
 800441e:	7019      	strb	r1, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	e7f9      	b.n	8004418 <memset+0x4>

08004424 <_init>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr

08004430 <_fini>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr
